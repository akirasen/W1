{"version":3,"file":"36.js","sources":["webpack:///app/components/Utility/Tabs.jsx","webpack:///app/components/Explorer/Accounts.jsx","webpack:///app/components/Explorer/AccountsContainer.jsx","webpack:///app/components/Explorer/Explorer.jsx"],"sourcesContent":["import React, {PropTypes} from \"react\";\r\nimport Translate from \"react-translate-component\";\r\nimport cnames from \"classnames\";\r\nimport { connect } from \"alt-react\";\r\nimport SettingsActions from \"actions/SettingsActions\";\r\nimport SettingsStore from \"stores/SettingsStore\";\r\n\r\n/**\r\n *  Renders a tab layout, handling switching and optionally persists the currently open tab using the SettingsStore\r\n *\r\n *  props:\r\n *     setting: unique name to be used to remember the active tab of this tabs layout,\r\n *     tabsClass: optional classes for the tabs container div\r\n *     contentClass: optional classes for the content container div\r\n *\r\n *  Usage:\r\n *\r\n *  <Tabs setting=\"mySetting\">\r\n *      <Tab title=\"locale.string.title1\">Tab 1 content</Tab>\r\n *      <Tab title=\"locale.string.title2\">Tab 2 content</Tab>\r\n *  </Tabs>\r\n *\r\n */\r\n\r\nclass Tab extends React.Component {\r\n\r\n    static propTypes = {\r\n        changeTab: PropTypes.func,\r\n        isActive: PropTypes.bool.isRequired,\r\n        index: PropTypes.number.isRequired,\r\n        className: PropTypes.string,\r\n        isLinkTo: PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        isActive: false,\r\n        index: 0,\r\n        className: \"\",\r\n        isLinkTo: \"\"\r\n    };\r\n\r\n    render() {\r\n        let {isActive, index, changeTab, title, className, disabled} = this.props;\r\n        let c = cnames({\"is-active\": isActive}, className);\r\n\r\n        if (this.props.collapsed) {\r\n            return <option value={index} data-is-link-to={this.props.isLinkTo} >{typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}</option>;\r\n        }\r\n        return (\r\n            <li className={c} onClick={!disabled ? changeTab.bind(this, index,this.props.isLinkTo) : null}>\r\n                <a>\r\n                    {typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}\r\n                    {this.props.subText ? <div className=\"tab-subtext\">{this.props.subText}</div> : null}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tabs extends React.Component {\r\n\r\n    static propTypes = {\r\n        setting: PropTypes.string,\r\n        defaultActiveTab: PropTypes.number,\r\n        segmented: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        active: 0,\r\n        defaultActiveTab: 0,\r\n        segmented: true,\r\n        contentClass: \"\",\r\n        style: {}\r\n    };\r\n\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            activeTab: props.setting ? props.viewSettings.get(props.setting, props.defaultActiveTab) : props.defaultActiveTab,\r\n            width: window.innerWidth\r\n        };\r\n\r\n        this._setDimensions = this._setDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._setDimensions();\r\n        window.addEventListener(\"resize\", this._setDimensions, {capture: false, passive: true});\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let nextSetting = nextProps.viewSettings.get(nextProps.setting);\r\n        if (nextSetting !== this.props.viewSettings.get(this.props.setting)) {\r\n            this.setState({\r\n                activeTab: nextSetting\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this._setDimensions);\r\n    }\r\n\r\n    _setDimensions() {\r\n        let width = window.innerWidth;\r\n\r\n        if (width !== this.state.width) {\r\n            this.setState({width});\r\n        }\r\n    }\r\n\r\n    _changeTab(value,isLinkTo) {\r\n        if (value === this.state.activeTab) return;\r\n        // Persist current tab if desired\r\n\r\n        if (isLinkTo !== \"\") {\r\n            this.context.router.push(isLinkTo);\r\n            return;\r\n        }\r\n\r\n        if (this.props.setting) {\r\n            SettingsActions.changeViewSetting({\r\n                [this.props.setting]: value\r\n            });\r\n        }\r\n        this.setState({activeTab: value});\r\n\r\n        if(this.props.onChangeTab) this.props.onChangeTab(value);\r\n    }\r\n\r\n    render() {\r\n        let {children, contentClass, tabsClass, style, segmented} = this.props;\r\n        const collapseTabs = this.state.width < 900 && React.Children.count(children) > 2;\r\n\r\n        let activeContent = null;\r\n\r\n        let tabIndex = [];\r\n        let tabs = React.Children.map(children, (child, index) => {\r\n            if (!child) {\r\n                return null;\r\n            }\r\n            if (collapseTabs && child.props.disabled) return null;\r\n            let isActive = index === this.state.activeTab;\r\n            if (isActive) {\r\n                activeContent = child.props.children;\r\n            }\r\n\r\n            return React.cloneElement(child, {collapsed: collapseTabs, isActive, changeTab: this._changeTab.bind(this), index: index} );\r\n        }).filter(a => {\r\n            if (a) {\r\n                tabIndex.push(a.props.index);\r\n            }\r\n            return a !== null;\r\n        });\r\n\r\n        if (!activeContent) {\r\n            activeContent = tabs[0].props.children;\r\n        }\r\n\r\n        return (\r\n            <div className={cnames(!!this.props.actionButtons ? \"with-buttons\" : \"\", this.props.className)}>\r\n                <div className=\"service-selector\">\r\n\r\n                    <ul style={style} className={cnames(\"button-group no-margin\", tabsClass, {segmented})}>\r\n                        {collapseTabs ?\r\n                            <li style={{paddingLeft: 10, paddingRight: 10, minWidth: \"15rem\"}}>\r\n                                <select\r\n                                    value={this.state.activeTab}\r\n                                    style={{marginTop: 10, marginBottom: 10}}\r\n                                    className=\"bts-select\"\r\n                                    onChange={(e) => { let ind = parseInt(e.target.value, 10); this._changeTab(ind,e.target[ind].attributes[\"data-is-link-to\"].value);}}\r\n                                >\r\n                                    {tabs}\r\n                                </select>\r\n                            </li> :\r\n                            tabs\r\n                        }\r\n                        {this.props.actionButtons ? <li className=\"tabs-action-buttons\">{this.props.actionButtons}</li> : null}\r\n                    </ul>\r\n                </div>\r\n                <div className={contentClass + \" tab-content\"} >\r\n                    {activeContent}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTabs = connect(Tabs, {\r\n    listenTo() {\r\n        return [SettingsStore];\r\n    },\r\n    getProps() {\r\n        return {viewSettings: SettingsStore.getState().viewSettings};\r\n    }\r\n});\r\n\r\nexport {Tabs, Tab};\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/Tabs.jsx","import React from \"react\";\r\nimport {PropTypes} from \"react\";\r\nimport {Link} from \"react-router/es\";\r\nimport Immutable from \"immutable\";\r\nimport Translate from \"react-translate-component\";\r\nimport AccountActions from \"actions/AccountActions\";\r\nimport {debounce} from \"lodash\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport BalanceComponent from \"../Utility/BalanceComponent\";\r\nimport AccountStore from \"stores/AccountStore\";\r\nimport { connect } from \"alt-react\";\r\n\r\nclass AccountRow extends React.Component {\r\n    static propTypes = {\r\n        account: ChainTypes.ChainAccount.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        tempComponent: \"tr\",\r\n        autosubscribe: false\r\n    };\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return (\r\n            nextProps.linkedAccounts !== this.props.linkedAccounts ||\r\n            nextProps.account !== this.props.account\r\n        );\r\n    }\r\n\r\n    _onLinkAccount(account, e) {\r\n        e.preventDefault();\r\n        AccountActions.linkAccount(account);\r\n    }\r\n\r\n    _onUnLinkAccount(account, e) {\r\n        e.preventDefault();\r\n        AccountActions.unlinkAccount(account);\r\n    }\r\n\r\n    render() {\r\n        let {account, linkedAccounts} = this.props;\r\n\r\n        let balance = account.getIn([\"balances\", \"1.3.0\"]) || null;\r\n        let accountName = account.get(\"name\");\r\n\r\n        return (\r\n            <tr key={account.get(\"id\")}>\r\n                <td>{account.get(\"id\")}</td>\r\n                {linkedAccounts.has(accountName) ? <td onClick={this._onUnLinkAccount.bind(this, accountName)}><Icon name=\"minus-circle\" /></td> : <td onClick={this._onLinkAccount.bind(this, accountName)}><Icon name=\"plus-circle\" /></td>}\r\n                <td><Link to={`/account/${accountName}/overview`}>{accountName}</Link></td>\r\n                <td>{!balance? \"n/a\" : <BalanceComponent balance={balance} />}</td>\r\n                <td>{!balance ? \"n/a\" : <BalanceComponent balance={balance} asPercentage={true} />}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nAccountRow = BindToChainState(AccountRow);\r\n\r\nlet AccountRowWrapper = (props) => {\r\n    return <AccountRow {...props} />;\r\n};\r\n\r\nAccountRowWrapper = connect(AccountRowWrapper, {\r\n    listenTo() {\r\n        return [AccountStore];\r\n    },\r\n    getProps() {\r\n        return {\r\n            linkedAccounts: AccountStore.getState().linkedAccounts\r\n        };\r\n    }\r\n});\r\n\r\n\r\nclass Accounts extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            searchTerm: props.searchTerm\r\n        };\r\n\r\n        this._searchAccounts = debounce(this._searchAccounts, 200);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return (\r\n                !Immutable.is(nextProps.searchAccounts, this.props.searchAccounts) ||\r\n                nextState.searchTerm !== this.state.searchTerm\r\n            );\r\n    }\r\n\r\n    _onSearchChange(e) {\r\n        this.setState({searchTerm: e.target.value.toLowerCase()});\r\n        this._searchAccounts(e.target.value);\r\n    }\r\n\r\n    _searchAccounts(searchTerm) {\r\n        AccountActions.accountSearch(searchTerm);\r\n    }\r\n\r\n    render() {\r\n        let {searchAccounts} = this.props;\r\n        let {searchTerm} = this.state;\r\n        let accountRows = null;\r\n\r\n        if (searchAccounts.size > 0 && searchTerm &&searchTerm.length > 0) {\r\n            accountRows = searchAccounts.filter(a => {\r\n                return a.indexOf(searchTerm) !== -1;\r\n            })\r\n            .sort((a, b) => {\r\n                if (a > b) {\r\n                    return 1;\r\n                } else if (a < b) {\r\n                    return -1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            })\r\n            .map((account, id) => {\r\n                return (\r\n                    <AccountRowWrapper key={id} account={account} />\r\n                );\r\n            }).toArray();\r\n        }\r\n\r\n        return (\r\n            <div className=\"grid-block\">\r\n                <div className=\"grid-block vertical medium-6 medium-offset-3\">\r\n                    <div className=\"grid-content shrink\">\r\n                        <Translate component=\"h3\" content=\"explorer.accounts.title\" />\r\n                        <input type=\"text\" value={this.state.searchTerm} onChange={this._onSearchChange.bind(this)}/>\r\n                    </div>\r\n                    <div className=\"grid-content\">\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th><Translate component=\"span\" content=\"explorer.assets.id\" /></th>\r\n                                    <th><Icon name=\"user\" /></th>\r\n                                    <th><Translate component=\"span\" content=\"account.name\" /></th>\r\n                                    <th><Translate component=\"span\" content=\"gateway.balance\" /></th>\r\n                                    <th><Translate component=\"span\" content=\"account.percent\" /></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {accountRows}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAccounts.defaultProps = {\r\n    searchAccounts: {}\r\n};\r\n\r\nAccounts.propTypes = {\r\n    searchAccounts: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Accounts;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Explorer/Accounts.jsx","import React from \"react\";\r\nimport AccountStore from \"stores/AccountStore\";\r\nimport AltContainer from \"alt-container\";\r\nimport Accounts from \"./Accounts\";\r\nimport Explorer from \"./Explorer\";\r\n\r\nclass AccountsContainer extends React.Component {\r\n    \r\n    render() {\r\n        let content = \r\n              <AltContainer \r\n                  stores={[AccountStore]}\r\n                  inject={{\r\n                    searchAccounts: () => {\r\n                        return AccountStore.getState().searchAccounts;\r\n                    },\r\n                    searchTerm: () => {\r\n                        return AccountStore.getState().searchTerm;\r\n                    }\r\n                  }} \r\n                  >\r\n                <Accounts />\r\n              </AltContainer>;\r\n                      \r\n             return (<Explorer tab=\"accounts\" content={content}/>);         \r\n    }\r\n}\r\n\r\nexport default AccountsContainer;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Explorer/AccountsContainer.jsx","import React from \"react\";\r\nimport {Tabs, Tab} from \"../Utility/Tabs\";\r\n\r\nclass Explorer extends React.Component {\r\n\r\n    static propTypes = {\r\n        tab: React.PropTypes.string,\r\n        content: React.PropTypes.object\r\n    };\r\n\r\n    static defaultProps = {\r\n        tab: \"blocks\",\r\n        content: null\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            \"tabs\": [\r\n                {name: \"blocks\", link: \"/explorer/blocks\", \"translate\": \"explorer.blocks.title\"},\r\n                {name: \"assets\", link: \"/explorer/assets\", \"translate\": \"explorer.assets.title\"},\r\n                {name: \"accounts\", link: \"/explorer/accounts\", \"translate\": \"explorer.accounts.title\"},\r\n                {name: \"witnesses\", link: \"/explorer/witnesses\", \"translate\": \"explorer.witnesses.title\"},\r\n                {name: \"committee_members\", link: \"/explorer/committee-members\", \"translate\": \"explorer.committee_members.title\"},\r\n                {name: \"markets\", link: \"/explorer/markets\", \"translate\": \"markets.title\"},\r\n                {name: \"fees\", link: \"/explorer/fees\", \"translate\": \"fees.title\"},\r\n                {name: \"oracles\", link: \"/explorer/oracles\", \"translate\": \"seer.oracle.title\"},\r\n                // {name: \"houses\", link: \"/explorer/houses\", \"translate\": \"seer.house.title\"}\r\n            ]\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        let defaultActiveTab = this.state.tabs.findIndex(t => t.name === this.props.tab);\r\n\r\n        let tabs = [];\r\n\r\n        for (var i = 0; i < this.state.tabs.length; i++) {\r\n            let currentTab = this.state.tabs[i];\r\n\r\n            let tabContent = (defaultActiveTab==i)?this.props.content:null;\r\n            let isLinkTo=(defaultActiveTab==i)?\"\":currentTab.link;\r\n\r\n            tabs.push(<Tab key={i} title={currentTab.translate} isLinkTo={isLinkTo}>{tabContent}</Tab>);\r\n        }\r\n\r\n\r\n        return (\r\n            <Tabs defaultActiveTab={defaultActiveTab} segmented={false} setting=\"explorerTab-{this.props.tab}\" className=\"account-tabs\" tabsClass=\"account-overview bordered-header content-block\" contentClass=\"tab-content padding\">\r\n                {tabs}\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Explorer;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Explorer/Explorer.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;;;;AAhCA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAwBA;;;AAoBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AANA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAdA;AAFA;AAmBA;AAAA;AAAA;AACA;AADA;AApBA;AA0BA;;;;AAnIA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AALA;AARA;AAiBA;AADA;AACA;AACA;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAUA;AACA;AAIA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;;;;AA1CA;AACA;AADA;AAEA;AADA;AADA;AAMA;AACA;AAFA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;AAWA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AACA;AAGA;AANA;AAOA;AACA;;;AACA;AACA;AAIA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AADA;AAUA;AAAA;AAAA;AACA;AADA;AAXA;AADA;AALA;AADA;AA0BA;;;;AA/EA;AACA;AAiFA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;ACtKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAXA;AACA;AAaA;AACA;;;;AAnBA;AACA;AAqBA;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;;;AAYA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAgBA;AACA;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAIA;;;;AAnDA;AACA;AADA;AAGA;AACA;AAFA;AAFA;AAQA;AACA;AAFA;AACA;AACA;AA6CA;;;;A","sourceRoot":""}