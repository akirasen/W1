{"version":3,"file":"43.js","sources":["webpack:///app/components/Utility/LinkToWitnessById.jsx","webpack:///app/components/Blockchain/Block.jsx","webpack:///app/components/Blockchain/BlockContainer.jsx"],"sourcesContent":["import React from \"react\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport LinkToAccountById from \"./LinkToAccountById\";\r\n\r\nclass LinkToWitnessById extends React.Component {\r\n    static propTypes = {\r\n        witness: ChainTypes.ChainObject.isRequired\r\n    }\r\n\r\n    render() {\r\n        let witness_account = this.props.witness.get(\"witness_account\");\r\n        return <LinkToAccountById account={witness_account} />;\r\n    }\r\n}\r\nLinkToWitnessById = BindToChainState(LinkToWitnessById);\r\n\r\nexport default LinkToWitnessById;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/LinkToWitnessById.jsx","import React from \"react\";\r\nimport {PropTypes} from \"react\";\r\nimport {FormattedDate} from \"react-intl\";\r\nimport Immutable from \"immutable\";\r\nimport BlockchainActions from \"actions/BlockchainActions\";\r\nimport Transaction from \"./Transaction\";\r\nimport Translate from \"react-translate-component\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport LinkToWitnessById from \"../Utility/LinkToWitnessById\";\r\n\r\nclass TransactionList extends React.Component {\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return (\r\n                nextProps.block.id !== this.props.block.id\r\n            );\r\n    }\r\n\r\n    render() {\r\n        let {block} = this.props;\r\n        let transactions = null;\r\n\r\n        transactions = [];\r\n\r\n        if (block.transactions.length > 0) {\r\n            transactions = [];\r\n\r\n            block.transactions.forEach((trx, index) => {\r\n                transactions.push(\r\n                    <Transaction\r\n                        key={index}\r\n                        trx={trx}\r\n                        index={index}\r\n                    />);\r\n            });\r\n        }\r\n\r\n        return (\r\n                <div>\r\n                    {transactions}\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nclass Block extends React.Component {\r\n    static propTypes = {\r\n        dynGlobalObject: ChainTypes.ChainObject.isRequired,\r\n        blocks: PropTypes.object.isRequired,\r\n        height: PropTypes.number.isRequired\r\n    }\r\n\r\n    static defaultProps = {\r\n        dynGlobalObject: \"2.1.0\",\r\n        blocks: {},\r\n        height: 1\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showInput: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._getBlock(this.props.height);\r\n    }\r\n\r\n    componentWillReceiveProps(np) {\r\n        if (np.height !== this.props.height) {\r\n            this._getBlock(np.height);\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(np, ns) {\r\n        return (\r\n            !Immutable.is(np.blocks, this.props.blocks) ||\r\n            np.height !== this.props.height ||\r\n            np.dynGlobalObject !== this.props.dynGlobalObject ||\r\n            ns.showInput !== this.state.showInput\r\n        );\r\n    }\r\n\r\n    _getBlock(height) {\r\n        if (height) {\r\n            height = parseInt(height, 10);\r\n            if (!this.props.blocks.get(height)) {\r\n                BlockchainActions.getBlock(height);\r\n            }\r\n        }\r\n    }\r\n\r\n    _nextBlock() {\r\n        let height = this.props.params.height;\r\n        let nextBlock = Math.min(this.props.dynGlobalObject.get(\"head_block_number\"), parseInt(height, 10) + 1);\r\n        this.props.router.push(`/block/${nextBlock}`);\r\n    }\r\n\r\n    _previousBlock() {\r\n        let height = this.props.params.height;\r\n        let previousBlock = Math.max(1, parseInt(height, 10) - 1);\r\n        this.props.router.push(`/block/${previousBlock}`);\r\n    }\r\n\r\n    toggleInput(e) {\r\n        e.preventDefault();\r\n        this.setState({showInput: true});\r\n    }\r\n\r\n    _onKeyDown(e) {\r\n        if (e && e.keyCode === 13) {\r\n            this.props.router.push(`/block/${e.target.value}`);\r\n            this.setState({showInput: false});\r\n        }\r\n    }\r\n\r\n    _onSubmit() {\r\n        const value = this.refs.blockInput.value;\r\n        if (value) {\r\n            this._onKeyDown({keyCode: 13, target: {value}});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { showInput } = this.state;\r\n        let {blocks} = this.props;\r\n        let height = parseInt(this.props.height, 10);\r\n        let block = blocks.get(height);\r\n\r\n        let blockHeight = showInput ?\r\n            <span className=\"inline-label\">\r\n                <input ref=\"blockInput\" type=\"number\" onKeyDown={this._onKeyDown.bind(this)}/>\r\n                <button onClick={this._onSubmit.bind(this)} className=\"button\"><Translate content=\"explorer.block.go_to\" /></button>\r\n            </span> :\r\n            <span>\r\n                <Translate style={{textTransform: \"uppercase\"}} component=\"span\" content=\"explorer.block.title\" />\r\n                <a onClick={this.toggleInput.bind(this)}>\r\n                    &nbsp;#{height}\r\n                </a>\r\n            </span>;\r\n\r\n        return (\r\n            <div className=\"grid-block page-layout\">\r\n                <div className=\"grid-block main-content\">\r\n                <div className=\"grid-content\">\r\n                        <div className=\"grid-content no-overflow medium-offset-2 medium-8 large-offset-3 large-6 small-12\">\r\n                        <h4 className=\"text-center\">\r\n\r\n                            {blockHeight}\r\n                        </h4>\r\n                        <ul>\r\n                           <li><Translate component=\"span\" content=\"explorer.block.date\" />:  {block ? <FormattedDate\r\n                                value={block.timestamp}\r\n                                format=\"full\"\r\n                                /> : null}\r\n                            </li>\r\n                            <li><Translate component=\"span\" content=\"explorer.block.witness\" />:  {block ? <LinkToWitnessById witness={block.witness} /> : null}</li>\r\n                            <li><Translate component=\"span\" content=\"explorer.block.previous\" />: {block ? block.previous : null}</li>\r\n                            <li><Translate component=\"span\" content=\"explorer.block.transactions\" />: {block ? block.transactions.length : null}</li>\r\n                        </ul>\r\n                        <div className=\"clearfix\" style={{marginBottom: \"1rem\"}}>\r\n                            <div className=\"button float-left outline\" onClick={this._previousBlock.bind(this)}>&#8592;</div>\r\n                            <div className=\"button float-right outline\" onClick={this._nextBlock.bind(this)}>&#8594;</div>\r\n                        </div>\r\n                        {block ? <TransactionList\r\n                            block={block}\r\n                        /> : null}\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BindToChainState(Block, {keep_updating: true});\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Blockchain/Block.jsx","import React from \"react\";\r\nimport BlockchainStore from \"stores/BlockchainStore\";\r\nimport AltContainer from \"alt-container\";\r\nimport Block from \"./Block\";\r\n\r\nclass BlockContainer extends React.Component {\r\n\r\n    render() {\r\n        let height = parseInt(this.props.params.height, 10);\r\n\r\n        return (\r\n              <AltContainer \r\n                  stores={[BlockchainStore]}\r\n                  inject={{\r\n                    blocks: () => {\r\n                        return BlockchainStore.getState().blocks;\r\n                    }\r\n                  }} \r\n                  >\r\n                <Block {...this.props} height={height}/>\r\n              </AltContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BlockContainer;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Blockchain/BlockContainer.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AACA;AACA;;;;AARA;AACA;AADA;AAEA;AADA;AACA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA;AACA;AAGA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;;AAhCA;AACA;AAmCA;;;AAaA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAFA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AADA;AAnBA;AADA;AADA;AADA;AA8BA;;;;AAjIA;AACA;AADA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AAHA;AACA;AACA;AA2HA;;;;;;;;;;;;ACnLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AARA;AAWA;;;;AAjBA;AACA;AAmBA;;;;A","sourceRoot":""}