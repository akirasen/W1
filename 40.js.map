{"version":3,"file":"40.js","sources":["webpack:///app/components/Account/AccountInfo.jsx","webpack:///app/components/Forms/AccountNameInput.jsx","webpack:///app/components/Account/CreateAccount.jsx"],"sourcesContent":["import React from \"react\";\r\nimport AccountImage from \"./AccountImage\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport Translate from \"react-translate-component\";\r\nimport QRCode from \"qrcode.react\";\r\n\r\nclass AccountInfo extends React.Component {\r\n\r\n    static propTypes = {\r\n        account: ChainTypes.ChainAccount.isRequired,\r\n        title: React.PropTypes.string,\r\n        image_size: React.PropTypes.object.isRequired,\r\n        my_account: React.PropTypes.bool\r\n    }\r\n\r\n    static defaultProps = {\r\n        title: null,\r\n        image_size: {height: 120, width: 120},\r\n        showQR: false,\r\n        titleClass: \"account-title\"\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hover: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let {account, image_size} = this.props;\r\n\r\n        let isLTM = account.get(\"lifetime_referrer_name\") === account.get(\"name\");\r\n\r\n        let QR = <div className=\"account-image\"><QRCode size={image_size.width} value={account.get(\"name\")}/></div>;\r\n\r\n        let qrState = !this.state.hover ? this.props.showQR : !this.props.showQR;\r\n\r\n        return (\r\n            <div style={{maxWidth: image_size.width}} className={\"account-info\" + (this.props.my_account ? \" my-account\" : \"\")}>\r\n                {this.props.title ? <h4>{this.props.title}</h4> : null}\r\n                <div\r\n                    onMouseEnter={() => {this.setState({hover: true});}}\r\n                    onMouseLeave={() => {this.setState({hover: false});}}\r\n                    className=\"clickable\"\r\n                    onClick={() => {\r\n                        this.setState({hover: false});\r\n                        this.props.toggleQR(!this.props.showQR);\r\n                    }}\r\n                >\r\n                    {qrState ?\r\n                        QR :\r\n                        <AccountImage size={image_size} account={account.get(\"name\")} custom_image={null}/>}\r\n                </div>\r\n                <p><Translate content=\"account.deposit_address\" />!</p>\r\n                <p className={this.props.titleClass}><span className={isLTM ? \"lifetime\" : \"\"}>{account.get(\"name\")}</span></p>\r\n                {/* <div className=\"secondary\">\r\n                    <span className=\"subheader\">#{display_id}</span>\r\n                    {this.props.my_account ? <span className=\"my-account-label\"><Translate content=\"account.mine\" /></span> : null}\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BindToChainState(AccountInfo);\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/AccountInfo.jsx","import React from \"react\";\r\nimport {PropTypes} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport AccountActions from \"actions/AccountActions\";\r\nimport AccountStore from \"stores/AccountStore\";\r\nimport {ChainValidation} from \"seerjs/es\";\r\nimport Translate from \"react-translate-component\";\r\nimport counterpart from \"counterpart\";\r\nimport AltContainer from \"alt-container\";\r\n\r\nclass AccountNameInput extends React.Component {\r\n\r\n    static propTypes = {\r\n        id: PropTypes.string,\r\n        placeholder: PropTypes.string,\r\n        initial_value: PropTypes.string,\r\n        onChange: PropTypes.func,\r\n        onEnter: PropTypes.func,\r\n        accountShouldExist: PropTypes.bool,\r\n        accountShouldNotExist: PropTypes.bool,\r\n        cheapNameOnly: PropTypes.bool,\r\n        noLabel: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        noLabel: false\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            value: null,\r\n            error: null,\r\n            existing_account: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return nextState.value !== this.state.value\r\n            || nextState.error !== this.state.error\r\n            || nextState.account_name !== this.state.account_name\r\n            || nextState.existing_account !== this.state.existing_account\r\n            || nextProps.searchAccounts !== this.props.searchAccounts\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.onChange) this.props.onChange({valid: !this.getError()});\r\n    }\r\n\r\n    getValue() {\r\n        return this.state.value;\r\n    }\r\n\r\n    setValue(value) {\r\n        this.setState({value});\r\n    }\r\n\r\n    clear() {\r\n        this.setState({ account_name: null, error: null, warning: null })\r\n    }\r\n\r\n    focus() {\r\n        this.refs.input.focus();\r\n    }\r\n\r\n    valid() {\r\n        return !this.getError();\r\n    }\r\n\r\n    getError() {\r\n        if(this.state.value === null) return null;\r\n        let error = null;\r\n        if (this.state.error) {\r\n            error = this.state.error;\r\n        } else if (this.props.accountShouldExist || this.props.accountShouldNotExist) {\r\n            let account = this.props.searchAccounts.find(a => a === this.state.value);\r\n            if (this.props.accountShouldNotExist && account) {\r\n                error = counterpart.translate(\"account.name_input.name_is_taken\");\r\n            }\r\n            if (this.props.accountShouldExist && !account) {\r\n                error = counterpart.translate(\"account.name_input.not_found\");\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateAccountName(value) {\r\n        this.state.error = value === \"\" ?\r\n            \"Please enter valid account name\" :\r\n            ChainValidation.is_account_name_error(value)\r\n\r\n        this.state.warning = null\r\n        if(this.props.cheapNameOnly) {\r\n            if( ! this.state.error && ! ChainValidation.is_cheap_name( value ))\r\n                this.state.error = counterpart.translate(\"account.name_input.premium_name_faucet\");\r\n        } else {\r\n            if( ! this.state.error && ! ChainValidation.is_cheap_name( value ))\r\n                this.state.warning = counterpart.translate(\"account.name_input.premium_name_warning\");\r\n        }\r\n        this.setState({value: value, error: this.state.error, warning: this.state.warning});\r\n        if (this.props.onChange) this.props.onChange({value: value, valid: !this.getError()});\r\n        if (this.props.accountShouldExist || this.props.accountShouldNotExist) AccountActions.accountSearch(value);\r\n    }\r\n\r\n    handleChange(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // Simplify the rules (prevent typing of invalid characters)\r\n        var account_name = e.target.value.toLowerCase()\r\n        account_name = account_name.match(/[a-z0-9\\.-]+/)\r\n        account_name = account_name ? account_name[0] : null\r\n        this.setState({ account_name })\r\n        this.validateAccountName(account_name);\r\n\r\n    }\r\n\r\n    onKeyDown(e) {\r\n        if (this.props.onEnter && event.keyCode === 13) this.props.onEnter(e);\r\n    }\r\n\r\n    render() {\r\n        let error = this.getError() || \"\";\r\n        let class_name = classNames(\"form-group\", \"account-name\", {\"has-error\": false});\r\n        let warning = this.state.warning;\r\n        // let {noLabel} = this.props;\r\n\r\n        return (\r\n            <div className={class_name}>\r\n                {/* {noLabel ? null : <label><Translate content=\"account.name\" /></label>} */}\r\n                <section>\r\n                    <input\r\n                        name=\"username\"\r\n                        id=\"username\"\r\n                        type=\"text\"\r\n                        ref=\"input\"\r\n                        autoComplete=\"off\"\r\n                        placeholder={this.props.placeholder}\r\n                        onChange={this.handleChange}\r\n                        onKeyDown={this.onKeyDown}\r\n                        value={this.state.account_name || this.props.initial_value}\r\n                    />\r\n                </section>\r\n                <div style={{textAlign: \"left\"}} className=\"facolor-error\">{error}</div>\r\n                <div style={{textAlign: \"left\"}} className=\"facolor-warning\">{error ? null : warning}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class StoreWrapper extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <AltContainer stores={[AccountStore]}\r\n                inject={{\r\n                        searchAccounts: () => {\r\n                            return AccountStore.getState().searchAccounts;\r\n                        }\r\n                    }}\r\n            >\r\n                <AccountNameInput\r\n                    ref=\"nameInput\"\r\n                    {...this.props}\r\n                />\r\n            </AltContainer>\r\n        )\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Forms/AccountNameInput.jsx","import React from \"react\";\r\nimport { connect } from \"alt-react\";\r\nimport classNames from \"classnames\";\r\nimport AccountActions from \"actions/AccountActions\";\r\nimport AccountStore from \"stores/AccountStore\";\r\nimport AccountNameInput from \"./../Forms/AccountNameInput\";\r\nimport PasswordInput from \"./../Forms/PasswordInput\";\r\nimport WalletDb from \"stores/WalletDb\";\r\nimport notify from \"actions/NotificationActions\";\r\nimport {Link} from \"react-router/es\";\r\nimport AccountSelect from \"../Forms/AccountSelect\";\r\nimport WalletUnlockActions from \"actions/WalletUnlockActions\";\r\nimport TransactionConfirmStore from \"stores/TransactionConfirmStore\";\r\nimport LoadingIndicator from \"../LoadingIndicator\";\r\nimport WalletActions from \"actions/WalletActions\";\r\nimport Translate from \"react-translate-component\";\r\nimport {ChainStore, FetchChain} from \"seerjs/es\";\r\nimport { BackupCreate, BackupRestore } from \"../Wallet/Backup\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport utils from \"common/utils\";\r\nimport SettingsActions from \"actions/SettingsActions\";\r\nimport counterpart from \"counterpart\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport Immutable from \"immutable\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport AccountInfo from \"./AccountInfo\";\r\n\r\nclass CreateAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            validAccountName: false,\r\n            accountName: \"\",\r\n            validPassword: false,\r\n            registrar_account: null,\r\n            loading: false,\r\n            hide_refcode: true,\r\n            show_identicon: false,\r\n            agreeCheck:false,\r\n            agreeAuxiliaries:false,\r\n            step:1,\r\n        };\r\n        this.onFinishConfirm = this.onFinishConfirm.bind(this);\r\n\r\n        this.accountNameInput = null;\r\n    }\r\n\r\n    componentWillMount() {\r\n        SettingsActions.changeSetting({\r\n            setting: \"passwordLogin\",\r\n            value: false\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !utils.are_equal_shallow(nextState, this.state);\r\n    }\r\n\r\n    _setStep(step){\r\n        AccountActions.setRegisterStep(step);\r\n        this.setState({\r\n          step:step\r\n        });\r\n    }\r\n\r\n    isValid() {\r\n        let firstAccount = AccountStore.getMyAccounts().length === 0;\r\n        let valid = this.state.validAccountName;\r\n        if (!WalletDb.getWallet()) {\r\n            valid = valid && this.state.validPassword;\r\n        }\r\n        if (!firstAccount) {\r\n            valid = valid && this.state.registrar_account;\r\n        }\r\n        return valid;\r\n    }\r\n\r\n    onAccountNameChange(e) {\r\n        const state = {};\r\n        if(e.valid !== undefined) state.validAccountName = e.valid;\r\n        if(e.value !== undefined) state.accountName = e.value;\r\n        if (!this.state.show_identicon) state.show_identicon = true;\r\n        this.setState(state);\r\n    }\r\n\r\n    onPasswordChange(e) {\r\n        this.setState({validPassword: e.valid});\r\n    }\r\n\r\n    onFinishConfirm(confirm_store_state) {\r\n        if(confirm_store_state.included && confirm_store_state.broadcasted_transaction) {\r\n            TransactionConfirmStore.unlisten(this.onFinishConfirm);\r\n            TransactionConfirmStore.reset();\r\n\r\n            FetchChain(\"getAccount\", this.state.accountName, undefined, {[this.state.accountName]: true}).then(() => {\r\n                console.log(\"onFinishConfirm\");\r\n                this.props.router.push(\"/wallet/backup/create?newAccount=true\");\r\n            });\r\n        }\r\n    }\r\n\r\n    createAccount(name) {\r\n        let refcode = this.refs.refcode ? this.refs.refcode.value() : null;\r\n        let referralAccount = AccountStore.getState().referralAccount;\r\n        WalletUnlockActions.unlock().then(() => {\r\n            this.setState({loading: true});\r\n\r\n            AccountActions.createAccount(name, this.state.registrar_account, referralAccount || this.state.registrar_account, 0, refcode).then(() => {\r\n                // User registering his own account\r\n                if(this.state.registrar_account) {\r\n                    FetchChain(\"getAccount\", name, undefined, {[name]: true}).then(() => {\r\n                        this._setStep(2);\r\n                        this.setState({\r\n                            loading: false\r\n                        });\r\n                    });\r\n                    TransactionConfirmStore.listen(this.onFinishConfirm);\r\n                } else { // Account registered by the faucet\r\n                    FetchChain(\"getAccount\", name, undefined, {[name]: true}).then(() => {\r\n                      this._setStep(2);\r\n                        this.setState({\r\n                            loading: false\r\n                        });\r\n                    });\r\n\r\n                }\r\n\r\n            }).catch(error => {\r\n                console.log(\"ERROR AccountActions.createAccount\", error);\r\n                let error_msg = error.base && error.base.length && error.base.length > 0 ? error.base[0] : \"unknown error\";\r\n                if (error.remote_ip) error_msg = error.remote_ip[0];\r\n                notify.addNotification({\r\n                    message: `Failed to create account: ${name} - ${error_msg}`,\r\n                    level: \"error\",\r\n                    autoDismiss: 10\r\n                });\r\n                this.setState({loading: false});\r\n            });\r\n        });\r\n    }\r\n\r\n    createWallet(password) {\r\n        return WalletActions.setWallet(\r\n            \"default\", //wallet name\r\n            password\r\n        ).then(()=> {\r\n            console.log(\"Congratulations, your wallet was successfully created.\");\r\n        }).catch(err => {\r\n            console.log(\"CreateWallet failed:\", err);\r\n            notify.addNotification({\r\n                message: `Failed to create wallet: ${err}`,\r\n                level: \"error\",\r\n                autoDismiss: 10\r\n            })\r\n        });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        if (!this.isValid()) return;\r\n        let account_name = this.accountNameInput.getValue();\r\n        if (WalletDb.getWallet()) {\r\n            this.createAccount(account_name);\r\n        } else {\r\n            let password = this.refs.password.value();\r\n            this.createWallet(password).then(() => this.createAccount(account_name));\r\n        }\r\n    }\r\n\r\n    onRegistrarAccountChange(registrar_account) {\r\n        this.setState({registrar_account});\r\n    }\r\n\r\n    // showRefcodeInput(e) {\r\n    //     e.preventDefault();\r\n    //     this.setState({hide_refcode: false});\r\n    // }\r\n\r\n    _renderAccountCreateForm() {\r\n\r\n        let {registrar_account} = this.state;\r\n\r\n        let my_accounts = AccountStore.getMyAccounts();\r\n        let firstAccount = my_accounts.length === 0;\r\n        let hasWallet = WalletDb.getWallet();\r\n        let valid = this.isValid() && this.state.agreeCheck;\r\n        let isLTM = false;\r\n        let registrar = registrar_account ? ChainStore.getAccount(registrar_account) : null;\r\n        if (registrar) {\r\n            if( registrar.get( \"lifetime_referrer\" ) == registrar.get( \"id\" ) ) {\r\n                isLTM = true;\r\n            }\r\n        }\r\n\r\n        let buttonClass = classNames(\"submit-button button \", {disabled: (!valid || (registrar_account && !isLTM))});\r\n\r\n        return (\r\n            <form\r\n                style={{maxWidth: \"40rem\"}}\r\n                onSubmit={this.onSubmit.bind(this)}\r\n                noValidate\r\n            >\r\n                <AccountNameInput\r\n                    ref={(ref) => {if (ref) {this.accountNameInput = ref.refs.nameInput;}}}\r\n                    cheapNameOnly={!!firstAccount}\r\n                    onChange={this.onAccountNameChange.bind(this)}\r\n                    accountShouldNotExist={true}\r\n                    placeholder={counterpart.translate(\"wallet.account_public\")}\r\n                    noLabel\r\n                />\r\n\r\n                {/* Only ask for password if a wallet already exists */}\r\n                {hasWallet ?\r\n                    null :\r\n                        <PasswordInput\r\n                            ref=\"password\"\r\n                            confirmation={true}\r\n                            onChange={this.onPasswordChange.bind(this)}\r\n                            noLabel\r\n                            checkStrength\r\n                        />\r\n                }\r\n\r\n                {/* If this is not the first account, show dropdown for fee payment account */}\r\n                {\r\n                firstAccount ? null : (\r\n                    <div className=\"full-width-content form-group no-overflow\">\r\n                        <label><Translate content=\"account.pay_from\" /></label>\r\n                        <AccountSelect\r\n                            account_names={my_accounts}\r\n                            onChange={this.onRegistrarAccountChange.bind(this)}\r\n\r\n                        />\r\n                        {(registrar_account && !isLTM) ? <div style={{textAlign: \"left\"}} className=\"facolor-error\"><Translate content=\"wallet.must_be_ltm\" /></div> : null}\r\n                    </div>)\r\n                }\r\n\r\n                <div className=\"agree-check\">\r\n                    <input className=\"cbox\" id=\"ck_agree\" type=\"checkbox\" onChange={e=>this.setState({agreeCheck: !this.state.agreeCheck})}/><label className=\"checkbox-mask\" htmlFor=\"ck_agree\"></label><Translate content=\"account.agree_text\"/>\r\n                </div>\r\n\r\n                {/* Submit button */}\r\n                {this.state.loading ?  <LoadingIndicator type=\"three-bounce\"/> : <button style={{width: \"100%\"}} className={buttonClass}><Translate content=\"account.create_wallet_and_account\" /></button>}\r\n\r\n               <Translate component=\"div\" content=\"account.existing_accounts\" style={{textAlign:\"left\",fontSize:\"14px\",color:\"#666\",paddingTop: \"40px\"}}/>\r\n                {/* Backup restore option */}\r\n                <div style={{paddingTop: 20,textAlign:\"left\"}}>\r\n                    <label style={{display:\"inline\"}}>\r\n                        <Link onClick={()=> {this._setStep(9) }}>\r\n                            <Translate content=\"wallet.restore\" />\r\n                        </Link>\r\n                    </label>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <label style={{display:\"inline\"}}>\r\n                        <Link to=\"/create-wallet-brainkey\">\r\n                            <Translate content=\"settings.backup_brainkey\" />\r\n                        </Link>\r\n                    </label>\r\n                </div>\r\n\r\n                {/* Skip to step 3 */}\r\n                {(!hasWallet || firstAccount ) ? null :<div style={{paddingTop: 20}}>\r\n                    <label>\r\n                        <a onClick={() => { this._setStep(4) }}><Translate content=\"wallet.go_get_started\" /></a>\r\n                    </label>\r\n                </div>}\r\n            </form>\r\n        );\r\n    }\r\n\r\n    _renderAccountCreateText() {\r\n        let hasWallet = WalletDb.getWallet();\r\n        let my_accounts = AccountStore.getMyAccounts();\r\n        let firstAccount = my_accounts.length === 0;\r\n\r\n        return (\r\n            <div className=\"confirm-checks\" >\r\n                <h6 style={{fontSize: \"14px\", color:\"#666\", paddingBottom: 15, marginTop: 0}}><Translate content=\"wallet.wallet_browser\" /></h6>\r\n\r\n                <p>{!hasWallet ? <Translate content=\"wallet.has_wallet\" /> : null}</p>\r\n\r\n                <Translate style={{textAlign: \"left\"}} component=\"p\" content=\"wallet.create_account_text\" />\r\n\r\n                {firstAccount ?\r\n                    <Translate style={{textAlign: \"left\"}} component=\"p\" content=\"wallet.first_account_paid\" /> :\r\n                    <Translate style={{textAlign: \"left\"}} component=\"p\" content=\"wallet.not_first_account\" />}\r\n\r\n                {/* {this.state.hide_refcode ? null :\r\n                    <div>\r\n                        <RefcodeInput ref=\"refcode\" label=\"refcode.refcode_optional\" expandable={true}/>\r\n                        <br/>\r\n                    </div>\r\n                } */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderBackup() {\r\n        return (\r\n            <div className=\"backup-submit\">\r\n              <BackupCreate inRegister noText downloadCb={this._onBackupDownload} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _onBackupDownload = () => {\r\n      this._setStep(4);\r\n    }\r\n\r\n    _renderBackupText() {\r\n        return (\r\n            <div>\r\n                {/*<p style={{fontWeight: \"normal\", fontFamily: \"Roboto-Medium, arial, sans-serif\", fontStyle: \"normal\"}}><Translate content=\"footer.backup\" /></p>*/}\r\n                {/*<p><Translate content=\"wallet.wallet_move\" unsafe /></p>*/}\r\n                {/*<p className=\"txtlabel warning\"><Translate unsafe content=\"wallet.wallet_lose_warning\" /></p>*/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderGetStarted() {\r\n\r\n        return (\r\n            <div>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n\r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_dashboard\" />:</td>\r\n                            <td><Link to=\"/dashboard\"><Translate content=\"header.dashboard\" /></Link></td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_account\" />:</td>\r\n                            <td><Link to={`/account/${this.state.accountName}/overview`} ><Translate content=\"wallet.link_account\" /></Link></td>\r\n                        </tr>\r\n                        \r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_transfer\" />:</td>\r\n                            <td><Link to=\"/transfer\"><Translate content=\"wallet.link_transfer\" /></Link></td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_settings\" />:</td>\r\n                            <td><Link to=\"/settings\"><Translate content=\"header.settings\" /></Link></td>\r\n                        </tr>\r\n                    </tbody>\r\n\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderGetStartedText() {\r\n\r\n        return (\r\n            <div>\r\n                <p style={{fontWeight: \"normal\", fontFamily: \"Roboto-Medium, arial, sans-serif\", fontStyle: \"normal\"}}><Translate content=\"wallet.congrat\" /></p>\r\n\r\n                <p><Translate content=\"wallet.tips_explore\" /></p>\r\n\r\n                <p><Translate content=\"wallet.tips_header\" /></p>\r\n\r\n                <p className=\"txtlabel warning\"><Translate content=\"wallet.tips_login\" /></p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderAccountInfo(){\r\n        let className = \"button\" + (this.state.agreeAuxiliaries ? \"\" : \" disabled\");\r\n        //accountName\r\n        let account = AccountStore.getState().currentAccount;\r\n\r\n        return (\r\n            <div className=\"account-info\">\r\n                <div className=\"account-names\" style={{marginTop:\"2em\"}}>\r\n                  <AccountNames account={account}/>\r\n                </div>\r\n                <Translate unsafe component=\"p\" content=\"wallet.auxiliaries_text\" style={{margin:\"3em 0 1em 0\"}}/>\r\n                <div className=\"card\">\r\n                    <p className=\"card-content\" style={{padding:\"0.5em\", lineHeight:\"2em\"}}>\r\n                      {WalletDb.getBrainKey()}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"agree-auxiliaries\">\r\n                    <input className=\"cbox\" id=\"ck_agree\" type=\"checkbox\" onChange={e=>this.setState({agreeAuxiliaries: !this.state.agreeAuxiliaries})}/>\r\n                    <label className=\"checkbox-mask\" htmlFor=\"ck_agree\" style={{width:\"26px\"}}></label>\r\n                    <Translate component=\"p\" content=\"wallet.auxiliaries_agree_text\" style={{display:\"inline\"}}/>\r\n                </div>\r\n\r\n                <button className={className} style={{width:\"100%\",height:\"3.13em\",margin:\"4em 0 12em 0\"}} onClick={() => {this._setStep(3)}}>\r\n                  <Translate content=\"wallet.next_step\" style={{display:\"inline\"}}/>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderResoteWallet(){\r\n\r\n        return(\r\n            <div style={{textAlign:\"left\"}}>\r\n                <BackupRestore inRegister />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let step = AccountStore.getState().registerStep;\r\n\r\n        return (\r\n            <div className=\"sub-content\">\r\n                <div style={{maxWidth: \"95vw\"}}>\r\n                    {step !== 1 && step !== 2 && step !== 3 && step !== 9 ? <p style={{fontWeight: \"normal\", fontFamily: \"Roboto-Medium, arial, sans-serif\", fontStyle: \"normal\"}}>\r\n                        <Translate content={\"wallet.step_\" + step} />\r\n                    </p> : null}\r\n\r\n                    {step === 1 ? this._renderAccountCreateForm() : step === 2 ? this._renderAccountInfo() : step === 3 ? this._renderBackup() :\r\n                        step === 9 ? this._renderResoteWallet() :\r\n                        this._renderGetStarted()\r\n                    }\r\n                </div>\r\n\r\n                <div style={{maxWidth: \"95vw\", paddingTop: \"2rem\"}}>\r\n                    {step === 1 ? this._renderAccountCreateText() : step === 2 ? null : step === 3 ? this._renderBackupText() :\r\n                        step === 9 ? null :\r\n                        this._renderGetStartedText()\r\n                    }\r\n                </div>\r\n                {/*<Link to=\"/\"><button className=\"button primary hollow\"><Translate content=\"wallet.back\" /></button></Link>*/}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass AccountNames extends React.Component {\r\n\r\n  static propTypes = {\r\n    account: ChainTypes.ChainAccount.isRequired\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render(){\r\n      let { account } = this.props;\r\n\r\n      return (\r\n        <div>\r\n          <div>您的SEER账号：{account.get(\"name\")}</div>\r\n          <div>您的SEER数字账号：{account.get(\"id\")}</div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nAccountNames = BindToChainState(AccountNames);\r\n\r\nexport default connect(CreateAccount, {\r\n    listenTo() {\r\n        return [AccountStore];\r\n    },\r\n    getProps() {\r\n        return {};\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/CreateAccount.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAgBA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AATA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAuBA;;;;AAzDA;AACA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAFA;AAUA;AACA;AACA;AACA;AAJA;AACA;AACA;AAiDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAkBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AAKA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAmBA;;;;AA3IA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAeA;AADA;AACA;AA+HA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AAaA;;;;AAlBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AA0RA;AACA;AACA;AA1RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAhBA;AAiBA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA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","sourceRoot":""}