{"version":3,"file":"45.js","sources":["webpack:///app/components/Forms/AccountNameInput.jsx","webpack:///app/components/Account/CreateAccountPassword.jsx"],"sourcesContent":["import React from \"react\";\r\nimport {PropTypes} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport AccountActions from \"actions/AccountActions\";\r\nimport AccountStore from \"stores/AccountStore\";\r\nimport {ChainValidation} from \"seerjs/es\";\r\nimport Translate from \"react-translate-component\";\r\nimport counterpart from \"counterpart\";\r\nimport AltContainer from \"alt-container\";\r\n\r\nclass AccountNameInput extends React.Component {\r\n\r\n    static propTypes = {\r\n        id: PropTypes.string,\r\n        placeholder: PropTypes.string,\r\n        initial_value: PropTypes.string,\r\n        onChange: PropTypes.func,\r\n        onEnter: PropTypes.func,\r\n        accountShouldExist: PropTypes.bool,\r\n        accountShouldNotExist: PropTypes.bool,\r\n        cheapNameOnly: PropTypes.bool,\r\n        noLabel: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        noLabel: false\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            value: null,\r\n            error: null,\r\n            existing_account: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return nextState.value !== this.state.value\r\n            || nextState.error !== this.state.error\r\n            || nextState.account_name !== this.state.account_name\r\n            || nextState.existing_account !== this.state.existing_account\r\n            || nextProps.searchAccounts !== this.props.searchAccounts\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.onChange) this.props.onChange({valid: !this.getError()});\r\n    }\r\n\r\n    getValue() {\r\n        return this.state.value;\r\n    }\r\n\r\n    setValue(value) {\r\n        this.setState({value});\r\n    }\r\n\r\n    clear() {\r\n        this.setState({ account_name: null, error: null, warning: null })\r\n    }\r\n\r\n    focus() {\r\n        this.refs.input.focus();\r\n    }\r\n\r\n    valid() {\r\n        return !this.getError();\r\n    }\r\n\r\n    getError() {\r\n        if(this.state.value === null) return null;\r\n        let error = null;\r\n        if (this.state.error) {\r\n            error = this.state.error;\r\n        } else if (this.props.accountShouldExist || this.props.accountShouldNotExist) {\r\n            let account = this.props.searchAccounts.find(a => a === this.state.value);\r\n            if (this.props.accountShouldNotExist && account) {\r\n                error = counterpart.translate(\"account.name_input.name_is_taken\");\r\n            }\r\n            if (this.props.accountShouldExist && !account) {\r\n                error = counterpart.translate(\"account.name_input.not_found\");\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateAccountName(value) {\r\n        this.state.error = value === \"\" ?\r\n            \"Please enter valid account name\" :\r\n            ChainValidation.is_account_name_error(value)\r\n\r\n        this.state.warning = null\r\n        if(this.props.cheapNameOnly) {\r\n            if( ! this.state.error && ! ChainValidation.is_cheap_name( value ))\r\n                this.state.error = counterpart.translate(\"account.name_input.premium_name_faucet\");\r\n        } else {\r\n            if( ! this.state.error && ! ChainValidation.is_cheap_name( value ))\r\n                this.state.warning = counterpart.translate(\"account.name_input.premium_name_warning\");\r\n        }\r\n        this.setState({value: value, error: this.state.error, warning: this.state.warning});\r\n        if (this.props.onChange) this.props.onChange({value: value, valid: !this.getError()});\r\n        if (this.props.accountShouldExist || this.props.accountShouldNotExist) AccountActions.accountSearch(value);\r\n    }\r\n\r\n    handleChange(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // Simplify the rules (prevent typing of invalid characters)\r\n        var account_name = e.target.value.toLowerCase()\r\n        account_name = account_name.match(/[a-z0-9\\.-]+/)\r\n        account_name = account_name ? account_name[0] : null\r\n        this.setState({ account_name })\r\n        this.validateAccountName(account_name);\r\n\r\n    }\r\n\r\n    onKeyDown(e) {\r\n        if (this.props.onEnter && event.keyCode === 13) this.props.onEnter(e);\r\n    }\r\n\r\n    render() {\r\n        let error = this.getError() || \"\";\r\n        let class_name = classNames(\"form-group\", \"account-name\", {\"has-error\": false});\r\n        let warning = this.state.warning;\r\n        // let {noLabel} = this.props;\r\n\r\n        return (\r\n            <div className={class_name}>\r\n                {/* {noLabel ? null : <label><Translate content=\"account.name\" /></label>} */}\r\n                <section>\r\n                    <input\r\n                        name=\"username\"\r\n                        id=\"username\"\r\n                        type=\"text\"\r\n                        ref=\"input\"\r\n                        autoComplete=\"off\"\r\n                        placeholder={this.props.placeholder}\r\n                        onChange={this.handleChange}\r\n                        onKeyDown={this.onKeyDown}\r\n                        value={this.state.account_name || this.props.initial_value}\r\n                    />\r\n                </section>\r\n                <div style={{textAlign: \"left\"}} className=\"facolor-error\">{error}</div>\r\n                <div style={{textAlign: \"left\"}} className=\"facolor-warning\">{error ? null : warning}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class StoreWrapper extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <AltContainer stores={[AccountStore]}\r\n                inject={{\r\n                        searchAccounts: () => {\r\n                            return AccountStore.getState().searchAccounts;\r\n                        }\r\n                    }}\r\n            >\r\n                <AccountNameInput\r\n                    ref=\"nameInput\"\r\n                    {...this.props}\r\n                />\r\n            </AltContainer>\r\n        )\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Forms/AccountNameInput.jsx","import React from \"react\";\r\nimport { connect } from \"alt-react\";\r\nimport classNames from \"classnames\";\r\nimport AccountActions from \"actions/AccountActions\";\r\nimport AccountStore from \"stores/AccountStore\";\r\nimport AccountNameInput from \"./../Forms/AccountNameInput\";\r\nimport WalletDb from \"stores/WalletDb\";\r\nimport notify from \"actions/NotificationActions\";\r\nimport {Link} from \"react-router/es\";\r\nimport AccountSelect from \"../Forms/AccountSelect\";\r\nimport TransactionConfirmStore from \"stores/TransactionConfirmStore\";\r\nimport LoadingIndicator from \"../LoadingIndicator\";\r\nimport Translate from \"react-translate-component\";\r\nimport counterpart from \"counterpart\";\r\nimport {ChainStore, FetchChain, key} from \"seerjs/es\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport utils from \"common/utils\";\r\nimport SettingsActions from \"actions/SettingsActions\";\r\nimport WalletUnlockActions from \"actions/WalletUnlockActions\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport CopyButton from \"../Utility/CopyButton\";\r\n\r\nclass CreateAccountPassword extends React.Component {\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            validAccountName: false,\r\n            accountName: \"\",\r\n            validPassword: false,\r\n            registrar_account: null,\r\n            loading: false,\r\n            hide_refcode: true,\r\n            show_identicon: false,\r\n            step: 1,\r\n            showPass: false,\r\n            generatedPassword: (\"P\" + key.get_random_key().toWif()).substr(0, 45),\r\n            confirm_password: \"\",\r\n            understand_1: false,\r\n            understand_2: false,\r\n            understand_3: false\r\n        };\r\n        this.onFinishConfirm = this.onFinishConfirm.bind(this);\r\n\r\n        this.accountNameInput = null;\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (!WalletDb.getWallet()) {\r\n            SettingsActions.changeSetting({\r\n                setting: \"passwordLogin\",\r\n                value: true\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !utils.are_equal_shallow(nextState, this.state);\r\n    }\r\n\r\n    isValid() {\r\n        let firstAccount = AccountStore.getMyAccounts().length === 0;\r\n        let valid = this.state.validAccountName;\r\n        if (!WalletDb.getWallet()) {\r\n            valid = valid && this.state.validPassword;\r\n        }\r\n        if (!firstAccount) {\r\n            valid = valid && this.state.registrar_account;\r\n        }\r\n        return valid && this.state.understand_1 && this.state.understand_2;\r\n    }\r\n\r\n    onAccountNameChange(e) {\r\n        const state = {};\r\n        if(e.valid !== undefined) state.validAccountName = e.valid;\r\n        if(e.value !== undefined) state.accountName = e.value;\r\n        if (!this.state.show_identicon) state.show_identicon = true;\r\n        this.setState(state);\r\n    }\r\n\r\n    onFinishConfirm(confirm_store_state) {\r\n        if(confirm_store_state.included && confirm_store_state.broadcasted_transaction) {\r\n            TransactionConfirmStore.unlisten(this.onFinishConfirm);\r\n            TransactionConfirmStore.reset();\r\n\r\n            FetchChain(\"getAccount\", this.state.accountName, undefined, {[this.state.accountName]: true}).then(() => {\r\n                this.props.router.push(\"/wallet/backup/create?newAccount=true\");\r\n            });\r\n        }\r\n    }\r\n\r\n    _unlockAccount(name, password) {\r\n\r\n        SettingsActions.changeSetting({\r\n                setting: \"passwordLogin\",\r\n                value: true\r\n        });\r\n\r\n        WalletDb.validatePassword(password, true, name);\r\n        WalletUnlockActions.checkLock.defer();\r\n    }\r\n\r\n    createAccount(name, password) {\r\n        let refcode = this.refs.refcode ? this.refs.refcode.value() : null;\r\n        let referralAccount = AccountStore.getState().referralAccount;\r\n        this.setState({loading: true});\r\n\r\n        AccountActions.createAccountWithPassword(name, password, this.state.registrar_account, referralAccount || this.state.registrar_account, 0, refcode).then(() => {\r\n            AccountActions.setPasswordAccount(name);\r\n            // User registering his own account\r\n            if(this.state.registrar_account) {\r\n                FetchChain(\"getAccount\", name, undefined, {[name]: true}).then(() => {\r\n                    this.setState({\r\n                        step: 2,\r\n                        loading: false\r\n                    });\r\n                    this._unlockAccount(name, password);\r\n                });\r\n                TransactionConfirmStore.listen(this.onFinishConfirm);\r\n            } else { // Account registered by the faucet\r\n                FetchChain(\"getAccount\", name, undefined, {[name]: true}).then(() => {\r\n                    this.setState({\r\n                        step: 2\r\n                    });\r\n                    this._unlockAccount(name, password);\r\n                });\r\n\r\n            }\r\n        }).catch(error => {\r\n            console.log(\"ERROR AccountActions.createAccount\", error);\r\n            let error_msg = error.base && error.base.length && error.base.length > 0 ? error.base[0] : \"unknown error\";\r\n            if (error.remote_ip) error_msg = error.remote_ip[0];\r\n            notify.addNotification({\r\n                message: `Failed to create account: ${name} - ${error_msg}`,\r\n                level: \"error\",\r\n                autoDismiss: 10\r\n            });\r\n            this.setState({loading: false});\r\n        });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        if (!this.isValid()) return;\r\n        let account_name = this.accountNameInput.getValue();\r\n        // if (WalletDb.getWallet()) {\r\n        //     this.createAccount(account_name);\r\n        // } else {\r\n        let password = this.state.generatedPassword;\r\n        this.createAccount(account_name, password);\r\n    }\r\n\r\n    onRegistrarAccountChange(registrar_account) {\r\n        this.setState({registrar_account});\r\n    }\r\n\r\n    // showRefcodeInput(e) {\r\n    //     e.preventDefault();\r\n    //     this.setState({hide_refcode: false});\r\n    // }\r\n\r\n    _onInput(value, e) {\r\n        this.setState({\r\n            [value]: value === \"confirm_password\" ? e.target.value : !this.state[value],\r\n            validPassword: value === \"confirm_password\" ? e.target.value === this.state.generatedPassword : this.state.validPassword\r\n        });\r\n    }\r\n\r\n    _renderAccountCreateForm() {\r\n\r\n        let {registrar_account} = this.state;\r\n\r\n        let my_accounts = AccountStore.getMyAccounts();\r\n        let firstAccount = my_accounts.length === 0;\r\n        let valid = this.isValid();\r\n        let isLTM = false;\r\n        let registrar = registrar_account ? ChainStore.getAccount(registrar_account) : null;\r\n        if (registrar) {\r\n            if( registrar.get( \"lifetime_referrer\" ) == registrar.get( \"id\" ) ) {\r\n                isLTM = true;\r\n            }\r\n        }\r\n\r\n        let buttonClass = classNames(\"submit-button button no-margin\", {disabled: (!valid || (registrar_account && !isLTM))});\r\n\r\n        return (\r\n            <div style={{textAlign: \"left\"}}>\r\n                <form\r\n                    style={{maxWidth: \"60rem\"}}\r\n                    onSubmit={this.onSubmit.bind(this)}\r\n                    noValidate\r\n                >\r\n                    <AccountNameInput\r\n                        ref={(ref) => {if (ref) {this.accountNameInput = ref.refs.nameInput;}}}\r\n                        cheapNameOnly={!!firstAccount}\r\n                        onChange={this.onAccountNameChange.bind(this)}\r\n                        accountShouldNotExist={true}\r\n                        placeholder={counterpart.translate(\"wallet.account_public\")}\r\n                        noLabel\r\n                    />\r\n\r\n                <section className=\"form-group\">\r\n                    <label className=\"left-label\"><Translate content=\"wallet.generated\" />&nbsp;&nbsp;<span className=\"tooltip\" data-html={true} data-tip={counterpart.translate(\"tooltip.generate\")}><Icon name=\"question-circle\" /></span></label>\r\n                    <div style={{paddingBottom: \"0.5rem\"}}>\r\n                        <span className=\"inline-label\">\r\n                            <input style={{maxWidth: \"calc(30rem - 48px)\", fontSize: \"80%\"}} disabled value={this.state.generatedPassword} type=\"text\" className=\"input-button\"/>\r\n                            <CopyButton\r\n                                text={this.state.generatedPassword}\r\n                                tip=\"tooltip.copy_password\"\r\n                                dataPlace=\"top\"\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </section>\r\n\r\n                <section>\r\n                    <label className=\"left-label\"><Translate content=\"wallet.confirm_password\" /></label>\r\n                    <input type=\"password\" name=\"password\" id=\"password\" value={this.state.confirm_password} onChange={this._onInput.bind(this, \"confirm_password\")}/>\r\n                    {this.state.confirm_password && this.state.confirm_password !== this.state.generatedPassword ?\r\n                    <div className=\"has-error\"><Translate content=\"wallet.confirm_error\" /></div> : null}\r\n                </section>\r\n\r\n            <br />\r\n\r\n            <div className=\"confirm-checks\" onClick={this._onInput.bind(this, \"understand_3\")}>\r\n                <label htmlFor=\"checkbox-1\" style={{position: \"relative\"}}>\r\n                    <input type=\"checkbox\" id=\"checkbox-1\" onChange={() => {}} checked={this.state.understand_3} style={{position: \"absolute\", top: \"-5px\", left: \"0\"}}/>\r\n                    <div style={{paddingLeft: \"30px\"}}><Translate content=\"wallet.understand_3\" /></div>\r\n                </label>\r\n            </div>\r\n            <br />\r\n            <div className=\"confirm-checks\" onClick={this._onInput.bind(this, \"understand_1\")}>\r\n                <label htmlFor=\"checkbox-2\" style={{position: \"relative\"}}>\r\n                    <input type=\"checkbox\" id=\"checkbox-2\" onChange={() => {}} checked={this.state.understand_1} style={{position: \"absolute\", top: \"-5px\", left: \"0\"}}/>\r\n                    <div style={{paddingLeft: \"30px\"}}><Translate content=\"wallet.understand_1\" /></div>\r\n                </label>\r\n            </div>\r\n            <br />\r\n\r\n            <div className=\"confirm-checks\" style={{paddingBottom: \"1.5rem\"}} onClick={this._onInput.bind(this, \"understand_2\")}>\r\n                <label htmlFor=\"checkbox-3\" style={{position: \"relative\"}}>\r\n                    <input type=\"checkbox\" id=\"checkbox-3\" onChange={() => {}} checked={this.state.understand_2} style={{position: \"absolute\", top: \"-5px\", left: \"0\"}}/>\r\n                    <div style={{paddingLeft: \"30px\"}}><Translate content=\"wallet.understand_2\" /></div>\r\n                </label>\r\n            </div>\r\n                {/* If this is not the first account, show dropdown for fee payment account */}\r\n                {\r\n                firstAccount ? null : (\r\n                    <div className=\"full-width-content form-group no-overflow\" style={{paddingTop: 30}}>\r\n                        <label><Translate content=\"account.pay_from\" /></label>\r\n                        <AccountSelect\r\n                            account_names={my_accounts}\r\n                            onChange={this.onRegistrarAccountChange.bind(this)}\r\n                        />\r\n                        {(registrar_account && !isLTM) ? <div style={{textAlign: \"left\"}} className=\"facolor-error\"><Translate content=\"wallet.must_be_ltm\" /></div> : null}\r\n                    </div>)\r\n                }\r\n\r\n                {/* Submit button */}\r\n                {this.state.loading ?  <LoadingIndicator type=\"three-bounce\"/> : <button style={{width: \"100%\"}} className={buttonClass}><Translate content=\"account.create_account\" /></button>}\r\n\r\n                {/* Backup restore option */}\r\n                {/* <div style={{paddingTop: 40}}>\r\n                    <label>\r\n                        <Link to=\"/existing-account\">\r\n                            <Translate content=\"wallet.restore\" />\r\n                        </Link>\r\n                    </label>\r\n\r\n                    <label>\r\n                        <Link to=\"/create-wallet-brainkey\">\r\n                            <Translate content=\"settings.backup_brainkey\" />\r\n                        </Link>\r\n                    </label>\r\n                </div> */}\r\n\r\n                {/* Skip to step 3 */}\r\n                {/* {(!hasWallet || firstAccount ) ? null :<div style={{paddingTop: 20}}>\r\n                    <label>\r\n                        <a onClick={() => {this.setState({step: 3});}}><Translate content=\"wallet.go_get_started\" /></a>\r\n                    </label>\r\n                </div>} */}\r\n            </form>\r\n                {/* <br />\r\n                <p>\r\n                    <Translate content=\"wallet.bts_rules\" unsafe />\r\n                </p> */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderAccountCreateText() {\r\n        let my_accounts = AccountStore.getMyAccounts();\r\n        let firstAccount = my_accounts.length === 0;\r\n\r\n        return (\r\n            <div>\r\n                <h4 style={{fontWeight: \"normal\", fontFamily: \"Roboto-Medium, arial, sans-serif\", fontStyle: \"normal\", paddingBottom: 15}}><Translate content=\"wallet.wallet_password\" /></h4>\r\n\r\n                <Translate style={{textAlign: \"left\"}} unsafe component=\"p\" content=\"wallet.create_account_password_text\" />\r\n\r\n                <Translate style={{textAlign: \"left\"}} component=\"p\" content=\"wallet.create_account_text\" />\r\n\r\n                {firstAccount ?\r\n                    null :\r\n                    <Translate style={{textAlign: \"left\"}} component=\"p\" content=\"wallet.not_first_account\" />}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderBackup() {\r\n        return (\r\n            <div className=\"backup-submit\">\r\n                <p><Translate unsafe content=\"wallet.password_crucial\" /></p>\r\n\r\n                <div>\r\n\r\n                    {!this.state.showPass ?\r\n                        <div onClick={() => {this.setState({showPass: true});}} className=\"button\"><Translate content=\"wallet.password_show\" /></div> :\r\n                        <div>\r\n                            <h5><Translate content=\"settings.password\" />:</h5>\r\n                            <p style={{fontWeight: \"normal\", fontFamily: \"Roboto-Medium, arial, sans-serif\", fontStyle: \"normal\", textAlign: \"center\"}}>{this.state.generatedPassword}</p>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div className=\"divider\" />\r\n                <p className=\"txtlabel warning\"><Translate unsafe content=\"wallet.password_lose_warning\" /></p>\r\n\r\n                <div style={{width: \"100%\"}} onClick={() => {this.context.router.push(\"/dashboard\");;}} className=\"button\"><Translate content=\"wallet.ok_done\" /></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderGetStarted() {\r\n\r\n        return (\r\n            <div>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n\r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_dashboard\" />:</td>\r\n                            <td><Link to=\"/dashboard\"><Translate content=\"header.dashboard\" /></Link></td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_account\" />:</td>\r\n                            <td><Link to={`/account/${this.state.accountName}/overview`} ><Translate content=\"wallet.link_account\" /></Link></td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_deposit\" />:</td>\r\n                            <td><Link to=\"/deposit-withdraw\"><Translate content=\"wallet.link_deposit\" /></Link></td>\r\n                        </tr>\r\n\r\n\r\n\r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_transfer\" />:</td>\r\n                            <td><Link to=\"/transfer\"><Translate content=\"wallet.link_transfer\" /></Link></td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td><Translate content=\"wallet.tips_settings\" />:</td>\r\n                            <td><Link to=\"/settings\"><Translate content=\"header.settings\" /></Link></td>\r\n                        </tr>\r\n                    </tbody>\r\n\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _renderGetStartedText() {\r\n\r\n        return (\r\n            <div>\r\n                <p style={{fontWeight: \"normal\", fontFamily: \"Roboto-Medium, arial, sans-serif\", fontStyle: \"normal\"}}><Translate content=\"wallet.congrat\" /></p>\r\n\r\n                <p><Translate content=\"wallet.tips_explore_pass\" /></p>\r\n\r\n                <p><Translate content=\"wallet.tips_header\" /></p>\r\n\r\n                <p className=\"txtlabel warning\"><Translate content=\"wallet.tips_login\" /></p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let {step} = this.state;\r\n        // let my_accounts = AccountStore.getMyAccounts();\r\n        // let firstAccount = my_accounts.length === 0;\r\n        return (\r\n            <div className=\"sub-content\">\r\n                <div>\r\n                        {step === 2 ? <p style={{fontWeight: \"normal\", fontFamily: \"Roboto-Medium, arial, sans-serif\", fontStyle: \"normal\"}}>\r\n                            <Translate content={\"wallet.step_\" + step} />\r\n                        </p> : null}\r\n\r\n                        {step === 3 ? this._renderGetStartedText() : null}\r\n\r\n                        {step === 1 ? (\r\n                            <div>\r\n                                {this._renderAccountCreateForm()}\r\n                            </div>\r\n                        ) : step === 2 ? this._renderBackup() :\r\n                                this._renderGetStarted()\r\n                        }\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(CreateAccountPassword, {\r\n    listenTo() {\r\n        return [AccountStore];\r\n    },\r\n    getProps() {\r\n        return {};\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/CreateAccountPassword.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAkBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AAKA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAmBA;;;;AA3IA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAeA;AADA;AACA;AA+HA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AAaA;;;;AAlBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AApBA;AAqBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AAIA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AADA;AAFA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAOA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAMA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AANA;AAWA;AAAA;AAAA;AAAA;AAAA;AAxEA;AADA;AAuGA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAPA;AAYA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAJA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAmxBA;AADA;AADA;AAmCA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;;;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAIA;AAEA;AACA;AAAA;AACA;AADA;AARA;AADA;AAoBA;;;;AA9YA;AACA;AADA;AAEA;AADA;AACA;AACA;AA8YA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;A","sourceRoot":""}