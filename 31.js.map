{"version":3,"file":"31.js","sources":["webpack:///app/components/Utility/Tabs.jsx","webpack:///app/components/Utility/EquivalentValueComponent.jsx","webpack:///app/components/Blockchain/Fees.jsx","webpack:///app/components/Blockchain/FeesContainer.jsx","webpack:///app/components/Explorer/FeesContainer.jsx","webpack:///app/components/Explorer/Explorer.jsx"],"sourcesContent":["import React, {PropTypes} from \"react\";\r\nimport Translate from \"react-translate-component\";\r\nimport cnames from \"classnames\";\r\nimport { connect } from \"alt-react\";\r\nimport SettingsActions from \"actions/SettingsActions\";\r\nimport SettingsStore from \"stores/SettingsStore\";\r\n\r\n/**\r\n *  Renders a tab layout, handling switching and optionally persists the currently open tab using the SettingsStore\r\n *\r\n *  props:\r\n *     setting: unique name to be used to remember the active tab of this tabs layout,\r\n *     tabsClass: optional classes for the tabs container div\r\n *     contentClass: optional classes for the content container div\r\n *\r\n *  Usage:\r\n *\r\n *  <Tabs setting=\"mySetting\">\r\n *      <Tab title=\"locale.string.title1\">Tab 1 content</Tab>\r\n *      <Tab title=\"locale.string.title2\">Tab 2 content</Tab>\r\n *  </Tabs>\r\n *\r\n */\r\n\r\nclass Tab extends React.Component {\r\n\r\n    static propTypes = {\r\n        changeTab: PropTypes.func,\r\n        isActive: PropTypes.bool.isRequired,\r\n        index: PropTypes.number.isRequired,\r\n        className: PropTypes.string,\r\n        isLinkTo: PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        isActive: false,\r\n        index: 0,\r\n        className: \"\",\r\n        isLinkTo: \"\"\r\n    };\r\n\r\n    render() {\r\n        let {isActive, index, changeTab, title, className, disabled} = this.props;\r\n        let c = cnames({\"is-active\": isActive}, className);\r\n\r\n        if (this.props.collapsed) {\r\n            return <option value={index} data-is-link-to={this.props.isLinkTo} >{typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}</option>;\r\n        }\r\n        return (\r\n            <li className={c} onClick={!disabled ? changeTab.bind(this, index,this.props.isLinkTo) : null}>\r\n                <a>\r\n                    {typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}\r\n                    {this.props.subText ? <div className=\"tab-subtext\">{this.props.subText}</div> : null}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tabs extends React.Component {\r\n\r\n    static propTypes = {\r\n        setting: PropTypes.string,\r\n        defaultActiveTab: PropTypes.number,\r\n        segmented: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        active: 0,\r\n        defaultActiveTab: 0,\r\n        segmented: true,\r\n        contentClass: \"\",\r\n        style: {}\r\n    };\r\n\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            activeTab: props.setting ? props.viewSettings.get(props.setting, props.defaultActiveTab) : props.defaultActiveTab,\r\n            width: window.innerWidth\r\n        };\r\n\r\n        this._setDimensions = this._setDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._setDimensions();\r\n        window.addEventListener(\"resize\", this._setDimensions, {capture: false, passive: true});\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let nextSetting = nextProps.viewSettings.get(nextProps.setting);\r\n        if (nextSetting !== this.props.viewSettings.get(this.props.setting)) {\r\n            this.setState({\r\n                activeTab: nextSetting\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this._setDimensions);\r\n    }\r\n\r\n    _setDimensions() {\r\n        let width = window.innerWidth;\r\n\r\n        if (width !== this.state.width) {\r\n            this.setState({width});\r\n        }\r\n    }\r\n\r\n    _changeTab(value,isLinkTo) {\r\n        if (value === this.state.activeTab) return;\r\n        // Persist current tab if desired\r\n\r\n        if (isLinkTo !== \"\") {\r\n            this.context.router.push(isLinkTo);\r\n            return;\r\n        }\r\n\r\n        if (this.props.setting) {\r\n            SettingsActions.changeViewSetting({\r\n                [this.props.setting]: value\r\n            });\r\n        }\r\n        this.setState({activeTab: value});\r\n\r\n        if(this.props.onChangeTab) this.props.onChangeTab(value);\r\n    }\r\n\r\n    render() {\r\n        let {children, contentClass, tabsClass, style, segmented} = this.props;\r\n        const collapseTabs = this.state.width < 900 && React.Children.count(children) > 2;\r\n\r\n        let activeContent = null;\r\n\r\n        let tabIndex = [];\r\n        let tabs = React.Children.map(children, (child, index) => {\r\n            if (!child) {\r\n                return null;\r\n            }\r\n            if (collapseTabs && child.props.disabled) return null;\r\n            let isActive = index === this.state.activeTab;\r\n            if (isActive) {\r\n                activeContent = child.props.children;\r\n            }\r\n\r\n            return React.cloneElement(child, {collapsed: collapseTabs, isActive, changeTab: this._changeTab.bind(this), index: index} );\r\n        }).filter(a => {\r\n            if (a) {\r\n                tabIndex.push(a.props.index);\r\n            }\r\n            return a !== null;\r\n        });\r\n\r\n        if (!activeContent) {\r\n            activeContent = tabs[0].props.children;\r\n        }\r\n\r\n        return (\r\n            <div className={cnames(!!this.props.actionButtons ? \"with-buttons\" : \"\", this.props.className)}>\r\n                <div className=\"service-selector\">\r\n\r\n                    <ul style={style} className={cnames(\"button-group no-margin\", tabsClass, {segmented})}>\r\n                        {collapseTabs ?\r\n                            <li style={{paddingLeft: 10, paddingRight: 10, minWidth: \"15rem\"}}>\r\n                                <select\r\n                                    value={this.state.activeTab}\r\n                                    style={{marginTop: 10, marginBottom: 10}}\r\n                                    className=\"bts-select\"\r\n                                    onChange={(e) => { let ind = parseInt(e.target.value, 10); this._changeTab(ind,e.target[ind].attributes[\"data-is-link-to\"].value);}}\r\n                                >\r\n                                    {tabs}\r\n                                </select>\r\n                            </li> :\r\n                            tabs\r\n                        }\r\n                        {this.props.actionButtons ? <li className=\"tabs-action-buttons\">{this.props.actionButtons}</li> : null}\r\n                    </ul>\r\n                </div>\r\n                <div className={contentClass + \" tab-content\"} >\r\n                    {activeContent}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTabs = connect(Tabs, {\r\n    listenTo() {\r\n        return [SettingsStore];\r\n    },\r\n    getProps() {\r\n        return {viewSettings: SettingsStore.getState().viewSettings};\r\n    }\r\n});\r\n\r\nexport {Tabs, Tab};\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/Tabs.jsx","import React from \"react\";\r\nimport FormattedAsset from \"./FormattedAsset\";\r\nimport ChainTypes from \"./ChainTypes\";\r\nimport BindToChainState from \"./BindToChainState\";\r\nimport utils from \"common/utils\";\r\nimport { connect } from \"alt-react\";\r\nimport MarketsStore from \"stores/MarketsStore\";\r\nimport Translate from \"react-translate-component\";\r\nimport counterpart from \"counterpart\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {MarketStatsCheck} from \"../Utility/EquivalentPrice\";\r\n\r\n/**\r\n *  Given an asset amount, displays the equivalent value in baseAsset if possible\r\n *\r\n *  Expects three properties\r\n *  -'toAsset' which should be a asset id\r\n *  -'fromAsset' which is the asset id of the original asset amount\r\n *  -'amount' which is the amount to convert\r\n *  -'fullPrecision' boolean to tell if the amount uses the full precision of the asset\r\n */\r\n\r\nclass ValueComponent extends MarketStatsCheck {\r\n\r\n    static propTypes = {\r\n        toAsset: ChainTypes.ChainAsset.isRequired,\r\n        fromAsset: ChainTypes.ChainAsset.isRequired,\r\n        coreAsset: ChainTypes.ChainAsset.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        toAsset: \"1.3.0\",\r\n        fullPrecision: true,\r\n        noDecimals: false,\r\n        fullDecimals: false,\r\n        hide_asset: false,\r\n        coreAsset: \"1.3.0\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    shouldComponentUpdate(np) {\r\n        return (\r\n            super.shouldComponentUpdate(np) ||\r\n            np.toAsset !== this.props.toAsset ||\r\n            np.fromAsset !== this.props.fromAsset ||\r\n            np.amount !== this.props.amount\r\n        );\r\n    }\r\n\r\n    getValue() {\r\n        let {amount, toAsset, fromAsset, fullPrecision, marketStats, coreAsset} = this.props;\r\n        let toStats, fromStats;\r\n\r\n        let toID = toAsset.get(\"id\");\r\n        let toSymbol = toAsset.get(\"symbol\");\r\n        let fromID = fromAsset.get(\"id\");\r\n        let fromSymbol = fromAsset.get(\"symbol\");\r\n\r\n        if (!fullPrecision) {\r\n            amount = utils.get_asset_amount(amount, fromAsset);\r\n        }\r\n\r\n        if (coreAsset && marketStats) {\r\n            let coreSymbol = coreAsset.get(\"symbol\");\r\n            toStats = marketStats.get(toSymbol + \"_\" + coreSymbol);\r\n            fromStats = marketStats.get(fromSymbol + \"_\" + coreSymbol);\r\n        }\r\n\r\n        let price = utils.convertPrice(fromStats && fromStats.close ? fromStats.close :\r\n                                        fromID === \"1.3.0\" || fromAsset.has(\"bitasset\") ? fromAsset : null,\r\n                                        toStats && toStats.close ? toStats.close :\r\n                                        (toID === \"1.3.0\" || toAsset.has(\"bitasset\")) ? toAsset : null,\r\n                                        fromID,\r\n                                        toID);\r\n\r\n        let eqValue = price ? utils.convertValue(price, amount, fromAsset, toAsset) : null;\r\n        return eqValue;\r\n    }\r\n\r\n    render() {\r\n        let {amount, toAsset, fromAsset, fullPrecision} = this.props;\r\n\r\n        let toID = toAsset.get(\"id\");\r\n        let toSymbol = toAsset.get(\"symbol\");\r\n\r\n        if (!fullPrecision) {\r\n            amount = utils.get_asset_amount(amount, fromAsset);\r\n        }\r\n\r\n        let eqValue = this.getValue();\r\n\r\n        if (!eqValue && eqValue !== 0) {\r\n            return <div className=\"tooltip inline-block\" data-place=\"bottom\" data-tip={counterpart.translate(\"tooltip.no_price\")} style={{fontSize: \"0.9rem\"}}><Translate content=\"account.no_price\" /></div>;\r\n        }\r\n\r\n        return <FormattedAsset hide_asset={this.props.hide_asset} noPrefix amount={eqValue} asset={toID} decimalOffset={toSymbol.indexOf(\"BTC\") !== -1 ? 4 : this.props.fullDecimals ? 0 : this.props.noDecimals ? toAsset.get(\"precision\") : (toAsset.get(\"precision\") - 2)}/>;\r\n    }\r\n}\r\nValueComponent = BindToChainState(ValueComponent, {keep_updating: true});\r\n\r\nclass EquivalentValueComponent extends React.Component {\r\n    render() {\r\n        let {refCallback, ...others} = this.props;\r\n\r\n        return <ValueComponent {...others} ref={refCallback} />;\r\n    }\r\n}\r\n\r\nEquivalentValueComponent = connect(EquivalentValueComponent, {\r\n    listenTo() {\r\n        return [MarketsStore];\r\n    },\r\n    getProps() {\r\n        return {\r\n            marketStats: MarketsStore.getState().allMarketStats\r\n        };\r\n    }\r\n});\r\n\r\nclass BalanceValueComponent extends React.Component {\r\n\r\n    static propTypes = {\r\n        balance: ChainTypes.ChainObject.isRequired\r\n    }\r\n\r\n    render() {\r\n        const {balance} = this.props;\r\n        const isBalanceObject = !!balance.getIn([\"balance\", \"amount\"]);\r\n\r\n        let amount = Number(isBalanceObject ? balance.getIn([\"balance\", \"amount\"]) : balance.get(\"balance\"));\r\n        let fromAsset = isBalanceObject ? balance.getIn([\"balance\", \"asset_id\"]) : balance.get(\"asset_type\");\r\n        if (isNaN(amount)) return <span>--</span>;\r\n        return <EquivalentValueComponent refCallback={this.props.refCallback} hide_asset={this.props.hide_asset} amount={amount} fromAsset={fromAsset} noDecimals={true} toAsset={this.props.toAsset}/>;\r\n    }\r\n}\r\nBalanceValueComponent = BindToChainState(BalanceValueComponent, {keep_updating: true});\r\nexport {EquivalentValueComponent, BalanceValueComponent};\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/EquivalentValueComponent.jsx","import React from \"react\";\r\nimport Immutable from \"immutable\";\r\nimport counterpart from \"counterpart\";\r\nimport classNames from \"classnames\";\r\nimport Translate from \"react-translate-component\";\r\nimport HelpContent from \"../Utility/HelpContent\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport FormattedAsset from \"../Utility/FormattedAsset\";\r\nimport {EquivalentValueComponent} from \"../Utility/EquivalentValueComponent\";\r\nimport {ChainStore, ChainTypes as grapheneChainTypes} from \"seerjs/es\";\r\nconst {operations} = grapheneChainTypes;\r\nlet ops = Object.keys(operations);\r\n\r\n// Define groups and their corresponding operation ids\r\nlet fee_grouping = {\r\n    general  : [0,22,23,24,25,29,30,33,35,36,37,39,55],\r\n    asset    : [9,10,11,12,13,34,38,62],\r\n    market   : [1,2,3],\r\n    account  : [4,5,6,7,8],\r\n    business : [14,15,16,17,18,19,20,21,26,27,28,31,32,56,57,58,59,60,61],\r\n    seer      : [40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]\r\n};\r\n\r\n// Operations that require LTM\r\nlet ltm_required = [4, 6, 14, 15];\r\n\r\nclass FeeGroup extends React.Component {\r\n\r\n    static propTypes = {\r\n        globalObject: ChainTypes.ChainObject.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        globalObject: \"2.0.0\",\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return (\r\n            !Immutable.is(nextProps.globalObject, this.props.globalObject)\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let {globalObject, settings, opIds, title} = this.props;\r\n        globalObject = globalObject.toJSON();\r\n        const core_asset = ChainStore.getAsset(\"1.3.0\");\r\n\r\n        let current_fees = globalObject.parameters.current_fees;\r\n        let scale   = current_fees.scale;\r\n        let feesRaw = current_fees.parameters;\r\n        let preferredUnit = settings.get(\"unit\") || core_asset.get(\"symbol\");\r\n\r\n        let trxTypes = counterpart.translate(\"transaction.trxTypes\");\r\n\r\n        let fees = opIds.map((feeIdx) => {\r\n            if (feeIdx >= feesRaw.length) {\r\n                console.warn(\"Asking for non-existing fee id %d! Check group settings in Fees.jsx\", feeIdx);\r\n                return; // FIXME, if I ask for a fee that does not exist?\r\n            }\r\n\r\n            let feeStruct = feesRaw[feeIdx];\r\n\r\n            let opId      = feeStruct[0]\r\n            let fee       = feeStruct[1]\r\n            let operation_name = ops[ opId ];\r\n            let feename        = trxTypes[ operation_name ];\r\n\r\n            let feeRateForLTM =  globalObject.parameters.network_percent_of_fee/1e4\r\n            if (opId === 9) {\r\n                // Asset creation fee for LTM is 60% of standart user\r\n                // See https://github.com/bitshares/bitshares-ui/issues/996\r\n                feeRateForLTM = 0.5+(1-feeRateForLTM)/2\r\n            }\r\n\r\n            let rows = []\r\n            let headIncluded = false\r\n            let labelClass = classNames(\"label\", \"info\");\r\n\r\n            for (let key in fee) {\r\n                let amount = fee[key]*scale/1e4;\r\n                let amountForLTM = amount * feeRateForLTM\r\n                let feeTypes = counterpart.translate(\"transaction.feeTypes\");\r\n                let assetAmount = amount ? <FormattedAsset amount={amount} asset=\"1.3.0\"/> : feeTypes[\"_none\"];\r\n                let equivalentAmount = amount ? <EquivalentValueComponent fromAsset=\"1.3.0\" fullPrecision={true} amount={amount} toAsset={preferredUnit} fullDecimals={true}/> : feeTypes[\"_none\"];\r\n                let assetAmountLTM = amountForLTM ? <FormattedAsset amount={amountForLTM} asset=\"1.3.0\"/> : feeTypes[\"_none\"];\r\n                let equivalentAmountLTM = amountForLTM ? <EquivalentValueComponent fromAsset=\"1.3.0\" fullPrecision={true} amount={amountForLTM} toAsset={preferredUnit} fullDecimals={true}/> : feeTypes[\"_none\"];\r\n                let title = null;\r\n\r\n                if (!headIncluded) {\r\n                    headIncluded = true\r\n                    title = (<td rowSpan=\"6\" style={{width:\"15em\"}}>\r\n                        <span className={labelClass}>\r\n                            {feename}\r\n                        </span>\r\n                    </td>)\r\n                }\r\n\r\n                if (ltm_required.indexOf(opId)<0) {\r\n                    rows.push(\r\n                        <tr key={opId.toString() + key} className={feeTypes[key]===\"Annual Membership\" ? \"linethrough\" : \"\"}>\r\n                            {title}\r\n                            <td>{feeTypes[key]}</td>\r\n                            <td style={{textAlign: \"right\"}}>{assetAmount}{amount !== 0 && preferredUnit !== \"SEER\" && [\" / \", equivalentAmount]}</td>\r\n                            <td style={{textAlign: \"right\"}}>{feeIdx !== 8 ? assetAmountLTM : null}{feeIdx !== 8 && amount !== 0 && preferredUnit !== \"SEER\" && [\" / \", equivalentAmountLTM]}</td>\r\n                        </tr>\r\n                    );\r\n                } else {\r\n                    rows.push(\r\n                        <tr key={opId.toString() + key}>\r\n                            {title}\r\n                            <td>{feeTypes[key]}</td>\r\n                            <td style={{textAlign: \"right\"}}>- <sup>*</sup></td>\r\n                            <td style={{textAlign: \"right\"}}>{assetAmountLTM}{amount !== 0 && preferredUnit !== \"SEER\" && [\" / \", equivalentAmountLTM]}</td>\r\n                        </tr>\r\n                    );\r\n                }\r\n            }\r\n            return (<tbody key={feeIdx}>{rows}</tbody>);\r\n        })\r\n\r\n        return (\r\n            <div className=\"asset-card\">\r\n                <div className=\"card-divider\">{this.props.title}</div>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><Translate content={\"explorer.block.op\"} /></th>\r\n                            <th><Translate content={\"explorer.fees.type\"} /></th>\r\n                            <th style={{textAlign: \"right\"}}><Translate content={\"explorer.fees.fee\"} /></th>\r\n                            <th style={{textAlign: \"right\"}}><Translate content={\"explorer.fees.feeltm\"} /></th>\r\n                        </tr>\r\n                    </thead>\r\n                    {fees}\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nFeeGroup = BindToChainState(FeeGroup, {keep_updating:true});\r\n\r\nclass Fees extends React.Component {\r\n\r\n    render() {\r\n\r\n        let FeeGroupsTitle  = counterpart.translate(\"transaction.feeGroups\");\r\n        let feeGroups = [];\r\n\r\n        for (let groupName in fee_grouping) {\r\n            let groupNameText = FeeGroupsTitle[groupName];\r\n            let feeIds = fee_grouping[groupName];\r\n            feeGroups.push(<FeeGroup key={groupName} settings={this.props.settings} opIds={feeIds} title={groupNameText}/>);\r\n        }\r\n\r\n        return(\r\n                <div className=\"grid-block vertical\" style={{overflow:\"visible\"}}>\r\n                    <div className=\"grid-block small-12 shrink\" style={{ overflow:\"visible\"}}>\r\n                        <HelpContent path = {\"components/Fees\"} />\r\n                    </div>\r\n                    <div className=\"grid-block small-12 \" style={{overflow:\"visible\"}}>\r\n                        <div className=\"grid-content\">\r\n                            {feeGroups}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Fees;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Blockchain/Fees.jsx","import React from \"react\";\r\nimport SettingsStore from \"stores/SettingsStore\";\r\nimport AltContainer from \"alt-container\";\r\nimport Fees from \"./Fees\";\r\n\r\nclass FeesContainer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <AltContainer\r\n                stores={[SettingsStore]}\r\n                inject={{\r\n                        settings : SettingsStore.getState().settings\r\n                }}>\r\n             <Fees {...this.props}/>\r\n            </AltContainer>\r\n           );\r\n    }\r\n}\r\n\r\nexport default FeesContainer;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Blockchain/FeesContainer.jsx","import React from \"react\";\r\nimport Explorer from \"./Explorer\";\r\nimport RealFeesContainer from \"../Blockchain/FeesContainer\"\r\n\r\n\r\nclass FeesContainer extends React.Component {\r\n\r\n    render() {\r\n\r\n        let content = <RealFeesContainer/>;\r\n\r\n        return (<Explorer tab=\"fees\" content={content}/>);\r\n\r\n    }\r\n}\r\n\r\nexport default FeesContainer;\n\n\n// WEBPACK FOOTER //\n// app/components/Explorer/FeesContainer.jsx","import React from \"react\";\r\nimport {Tabs, Tab} from \"../Utility/Tabs\";\r\n\r\nclass Explorer extends React.Component {\r\n\r\n    static propTypes = {\r\n        tab: React.PropTypes.string,\r\n        content: React.PropTypes.object\r\n    };\r\n\r\n    static defaultProps = {\r\n        tab: \"blocks\",\r\n        content: null\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            \"tabs\": [\r\n                {name: \"blocks\", link: \"/explorer/blocks\", \"translate\": \"explorer.blocks.title\"},\r\n                {name: \"assets\", link: \"/explorer/assets\", \"translate\": \"explorer.assets.title\"},\r\n                {name: \"accounts\", link: \"/explorer/accounts\", \"translate\": \"explorer.accounts.title\"},\r\n                {name: \"witnesses\", link: \"/explorer/witnesses\", \"translate\": \"explorer.witnesses.title\"},\r\n                {name: \"committee_members\", link: \"/explorer/committee-members\", \"translate\": \"explorer.committee_members.title\"},\r\n                {name: \"markets\", link: \"/explorer/markets\", \"translate\": \"markets.title\"},\r\n                {name: \"fees\", link: \"/explorer/fees\", \"translate\": \"fees.title\"},\r\n                {name: \"oracles\", link: \"/explorer/oracles\", \"translate\": \"seer.oracle.title\"},\r\n                // {name: \"houses\", link: \"/explorer/houses\", \"translate\": \"seer.house.title\"}\r\n            ]\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        let defaultActiveTab = this.state.tabs.findIndex(t => t.name === this.props.tab);\r\n\r\n        let tabs = [];\r\n\r\n        for (var i = 0; i < this.state.tabs.length; i++) {\r\n            let currentTab = this.state.tabs[i];\r\n\r\n            let tabContent = (defaultActiveTab==i)?this.props.content:null;\r\n            let isLinkTo=(defaultActiveTab==i)?\"\":currentTab.link;\r\n\r\n            tabs.push(<Tab key={i} title={currentTab.translate} isLinkTo={isLinkTo}>{tabContent}</Tab>);\r\n        }\r\n\r\n\r\n        return (\r\n            <Tabs defaultActiveTab={defaultActiveTab} segmented={false} setting=\"explorerTab-{this.props.tab}\" className=\"account-tabs\" tabsClass=\"account-overview bordered-header content-block\" contentClass=\"tab-content padding\">\r\n                {tabs}\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Explorer;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Explorer/Explorer.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;;;;AAhCA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAwBA;;;AAoBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AANA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAdA;AAFA;AAmBA;AAAA;AAAA;AACA;AADA;AApBA;AA0BA;;;;AAnIA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AALA;AARA;AAiBA;AADA;AACA;AACA;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;AAiBA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAMA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;AAjFA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AA0EA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;AAUA;;;;;;;;;;;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAdA;AACA;AADA;AAGA;AADA;AACA;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;;;AAUA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AADA;AAQA;AATA;AAFA;AAeA;;;;AAlHA;AACA;AADA;AAGA;AADA;AAFA;AAOA;AADA;AACA;AA6GA;AACA;AACA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAJA;AAWA;;;;AAzBA;AACA;AA2BA;;;;;;;;;;AC7KA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AALA;AAQA;;;;AAZA;AACA;AAcA;;;;;;;;;;ACpBA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AARA;AACA;AAUA;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;;;AAYA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAgBA;AACA;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAIA;;;;AAnDA;AACA;AADA;AAGA;AACA;AAFA;AAFA;AAQA;AACA;AAFA;AACA;AACA;AA6CA;;;;A","sourceRoot":""}