{"version":3,"file":"46.js","sources":["webpack:///app/components/Utility/Tabs.jsx","webpack:///app/actions/WitnessActions.js","webpack:///app/components/Account/AccountWitness.jsx"],"sourcesContent":["import React, {PropTypes} from \"react\";\r\nimport Translate from \"react-translate-component\";\r\nimport cnames from \"classnames\";\r\nimport { connect } from \"alt-react\";\r\nimport SettingsActions from \"actions/SettingsActions\";\r\nimport SettingsStore from \"stores/SettingsStore\";\r\n\r\n/**\r\n *  Renders a tab layout, handling switching and optionally persists the currently open tab using the SettingsStore\r\n *\r\n *  props:\r\n *     setting: unique name to be used to remember the active tab of this tabs layout,\r\n *     tabsClass: optional classes for the tabs container div\r\n *     contentClass: optional classes for the content container div\r\n *\r\n *  Usage:\r\n *\r\n *  <Tabs setting=\"mySetting\">\r\n *      <Tab title=\"locale.string.title1\">Tab 1 content</Tab>\r\n *      <Tab title=\"locale.string.title2\">Tab 2 content</Tab>\r\n *  </Tabs>\r\n *\r\n */\r\n\r\nclass Tab extends React.Component {\r\n\r\n    static propTypes = {\r\n        changeTab: PropTypes.func,\r\n        isActive: PropTypes.bool.isRequired,\r\n        index: PropTypes.number.isRequired,\r\n        className: PropTypes.string,\r\n        isLinkTo: PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        isActive: false,\r\n        index: 0,\r\n        className: \"\",\r\n        isLinkTo: \"\"\r\n    };\r\n\r\n    render() {\r\n        let {isActive, index, changeTab, title, className, disabled} = this.props;\r\n        let c = cnames({\"is-active\": isActive}, className);\r\n\r\n        if (this.props.collapsed) {\r\n            return <option value={index} data-is-link-to={this.props.isLinkTo} >{typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}</option>;\r\n        }\r\n        return (\r\n            <li className={c} onClick={!disabled ? changeTab.bind(this, index,this.props.isLinkTo) : null}>\r\n                <a>\r\n                    {typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}\r\n                    {this.props.subText ? <div className=\"tab-subtext\">{this.props.subText}</div> : null}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tabs extends React.Component {\r\n\r\n    static propTypes = {\r\n        setting: PropTypes.string,\r\n        defaultActiveTab: PropTypes.number,\r\n        segmented: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        active: 0,\r\n        defaultActiveTab: 0,\r\n        segmented: true,\r\n        contentClass: \"\",\r\n        style: {}\r\n    };\r\n\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            activeTab: props.setting ? props.viewSettings.get(props.setting, props.defaultActiveTab) : props.defaultActiveTab,\r\n            width: window.innerWidth\r\n        };\r\n\r\n        this._setDimensions = this._setDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._setDimensions();\r\n        window.addEventListener(\"resize\", this._setDimensions, {capture: false, passive: true});\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let nextSetting = nextProps.viewSettings.get(nextProps.setting);\r\n        if (nextSetting !== this.props.viewSettings.get(this.props.setting)) {\r\n            this.setState({\r\n                activeTab: nextSetting\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this._setDimensions);\r\n    }\r\n\r\n    _setDimensions() {\r\n        let width = window.innerWidth;\r\n\r\n        if (width !== this.state.width) {\r\n            this.setState({width});\r\n        }\r\n    }\r\n\r\n    _changeTab(value,isLinkTo) {\r\n        if (value === this.state.activeTab) return;\r\n        // Persist current tab if desired\r\n\r\n        if (isLinkTo !== \"\") {\r\n            this.context.router.push(isLinkTo);\r\n            return;\r\n        }\r\n\r\n        if (this.props.setting) {\r\n            SettingsActions.changeViewSetting({\r\n                [this.props.setting]: value\r\n            });\r\n        }\r\n        this.setState({activeTab: value});\r\n\r\n        if(this.props.onChangeTab) this.props.onChangeTab(value);\r\n    }\r\n\r\n    render() {\r\n        let {children, contentClass, tabsClass, style, segmented} = this.props;\r\n        const collapseTabs = this.state.width < 900 && React.Children.count(children) > 2;\r\n\r\n        let activeContent = null;\r\n\r\n        let tabIndex = [];\r\n        let tabs = React.Children.map(children, (child, index) => {\r\n            if (!child) {\r\n                return null;\r\n            }\r\n            if (collapseTabs && child.props.disabled) return null;\r\n            let isActive = index === this.state.activeTab;\r\n            if (isActive) {\r\n                activeContent = child.props.children;\r\n            }\r\n\r\n            return React.cloneElement(child, {collapsed: collapseTabs, isActive, changeTab: this._changeTab.bind(this), index: index} );\r\n        }).filter(a => {\r\n            if (a) {\r\n                tabIndex.push(a.props.index);\r\n            }\r\n            return a !== null;\r\n        });\r\n\r\n        if (!activeContent) {\r\n            activeContent = tabs[0].props.children;\r\n        }\r\n\r\n        return (\r\n            <div className={cnames(!!this.props.actionButtons ? \"with-buttons\" : \"\", this.props.className)}>\r\n                <div className=\"service-selector\">\r\n\r\n                    <ul style={style} className={cnames(\"button-group no-margin\", tabsClass, {segmented})}>\r\n                        {collapseTabs ?\r\n                            <li style={{paddingLeft: 10, paddingRight: 10, minWidth: \"15rem\"}}>\r\n                                <select\r\n                                    value={this.state.activeTab}\r\n                                    style={{marginTop: 10, marginBottom: 10}}\r\n                                    className=\"bts-select\"\r\n                                    onChange={(e) => { let ind = parseInt(e.target.value, 10); this._changeTab(ind,e.target[ind].attributes[\"data-is-link-to\"].value);}}\r\n                                >\r\n                                    {tabs}\r\n                                </select>\r\n                            </li> :\r\n                            tabs\r\n                        }\r\n                        {this.props.actionButtons ? <li className=\"tabs-action-buttons\">{this.props.actionButtons}</li> : null}\r\n                    </ul>\r\n                </div>\r\n                <div className={contentClass + \" tab-content\"} >\r\n                    {activeContent}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTabs = connect(Tabs, {\r\n    listenTo() {\r\n        return [SettingsStore];\r\n    },\r\n    getProps() {\r\n        return {viewSettings: SettingsStore.getState().viewSettings};\r\n    }\r\n});\r\n\r\nexport {Tabs, Tab};\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/Tabs.jsx","import WalletApi from \"../api/WalletApi\";\r\nimport alt from \"alt-instance\";\r\nimport WalletDb from \"stores/WalletDb\";\r\n\r\nclass WitnessActions {\r\n    createCollateral(args) {\r\n        let tr = WalletApi.new_transaction();\r\n\r\n        tr.add_type_operation(\"witness_create_collateral\", args);\r\n        return (dispatch) => {\r\n            return WalletDb.process_transaction(tr, null, true).then(result => {\r\n                console.log(\"witness_create_collateral result:\", result);\r\n                dispatch(true);\r\n            }).catch(error => {\r\n                console.log(\"witness_create_collateral error ----->\", error);\r\n                dispatch(false);\r\n            });\r\n        };\r\n    }\r\n\r\n    cancelCollateral(args) {\r\n        let tr = WalletApi.new_transaction();\r\n\r\n        tr.add_type_operation(\"witness_cancel_collateral\", args);\r\n        return (dispatch) => {\r\n            return WalletDb.process_transaction(tr, null, true).then(result => {\r\n                console.log(\"witness_cancel_collateral result:\", result);\r\n                dispatch(true);\r\n            }).catch(error => {\r\n                console.log(\"witness_cancel_collateral error ----->\", error);\r\n                dispatch(false);\r\n            });\r\n        };\r\n    }\r\n\r\n    claimCollateral(args) {\r\n        let tr = WalletApi.new_transaction();\r\n\r\n        tr.add_type_operation(\"witness_claim_collateral\", args);\r\n        return (dispatch) => {\r\n            return WalletDb.process_transaction(tr, null, true).then(result => {\r\n                console.log(\"witness_claim_collateral result:\", result);\r\n                dispatch(true);\r\n            }).catch(error => {\r\n                console.log(\"witness_claim_collateral error ----->\", error);\r\n                dispatch(false);\r\n            });\r\n        };\r\n    }\r\n\r\n    create(args) {\r\n        let tr = WalletApi.new_transaction();\r\n\r\n        tr.add_type_operation(\"witness_create\", args);\r\n        return (dispatch) => {\r\n            return WalletDb.process_transaction(tr, null, true).then(result => {\r\n                console.log(\"witness_create result:\", result);\r\n                dispatch(true);\r\n            }).catch(error => {\r\n                console.log(\"witness_create error ----->\", error);\r\n                dispatch(false);\r\n            });\r\n        };\r\n    }\r\n\r\n    update(args) {\r\n        let tr = WalletApi.new_transaction();\r\n\r\n        tr.add_type_operation(\"witness_update\", args);\r\n        return (dispatch) => {\r\n            return WalletDb.process_transaction(tr, null, true).then(result => {\r\n                console.log(\"witness_update result:\", result);\r\n                dispatch(true);\r\n            }).catch(error => {\r\n                console.log(\"witness_update error ----->\", error);\r\n                dispatch(false);\r\n            });\r\n        };\r\n    }\r\n}\r\nexport default alt.createActions(WitnessActions);\r\n\n\n\n// WEBPACK FOOTER //\n// app/actions/WitnessActions.js","import React from \"react\";\r\nimport {PropTypes} from \"react\";\r\nimport Translate from \"react-translate-component\";\r\nimport FormattedAsset from \"../Utility/FormattedAsset\";\r\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport {Tabs, Tab} from \"../Utility/Tabs\";\r\nimport {Apis} from \"seerjs-ws\";\r\nimport {ChainStore} from \"seerjs\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport TimeAgo from \"../Utility/TimeAgo\";\r\nimport WitnessActions from \"../../actions/WitnessActions\";\r\nimport BaseModal from \"../Modal/BaseModal\";\r\nimport counterpart from \"counterpart\";\r\nimport AmountSelector from \"../Utility/AmountSelector\";\r\nimport {Link} from \"react-router/es\";\r\n\r\nclass CollateralList extends React.Component {\r\n    static defaultProps = {\r\n    };\r\n\r\n    static propTypes = {\r\n        collaterals: ChainTypes.ChainObjectsList.isRequired,\r\n        witnessId: ChainTypes.ChainObject.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            collaterals: [],\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        Apis.instance().db_api().exec(\"get_objects\", [this.props.collaterals]).then(r => {\r\n            this.setState({collaterals: r})\r\n        });\r\n    }\r\n\r\n    cancelCollateral(accountId, collateralId) {\r\n        var args = {\r\n            witness: this.props.witnessId,\r\n            witness_account: accountId,\r\n            collateral_id: collateralId,\r\n        };\r\n        WitnessActions.cancelCollateral(args);\r\n    }\r\n\r\n    claimCollateral(accountId, collateralId) {\r\n        var args = {\r\n            witness: this.props.witnessId,\r\n            witness_account: accountId,\r\n            collateral_id: collateralId,\r\n        };\r\n        WitnessActions.claimCollateral(args);\r\n    }\r\n\r\n    render(){\r\n        const now =  new Date().valueOf() + new Date().getTimezoneOffset() * 60000;\r\n        const collateralRows = this.state.collaterals.map(r => <tr key={r.id}>\r\n                <td>{r.id}</td>\r\n                <td>{r.start}</td>\r\n                <td><FormattedAsset amount={r.amount} asset=\"1.3.0\" decimalOffset={5} /></td>\r\n                <td>{r.expiration}</td>\r\n                <td>\r\n                    {\r\n                        r.status\r\n                        ? now > new Date(r.expiration).valueOf()\r\n                            ? <Translate content=\"account.witness.collateral.unfrozen\"/>\r\n                            : <Translate content=\"account.witness.collateral.unfreezing\"/>\r\n                        : <Translate content=\"account.witness.collateral.frozen\"/>\r\n                    }\r\n                </td>\r\n                <td>\r\n                    {\r\n                        r.status\r\n                        ? <button onClick={this.claimCollateral.bind(this, r.owner, r.id)} className={`button ${now > new Date(r.expiration).valueOf() ? '' : 'disabled'}`}><Translate content=\"account.witness.collateral.claim\"/></button>\r\n                        : <button onClick={this.cancelCollateral.bind(this, r.owner, r.id)} className=\"button\"><Translate content=\"account.witness.collateral.cancel\"/></button>\r\n                    }\r\n                </td>\r\n            </tr>)\r\n        return (\r\n            <table className=\"table dashboard-table table-hover\">\r\n                <thead>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th><Translate content=\"account.witness.collateral.date\"/></th>\r\n                    <th><Translate content=\"account.witness.collateral.amount\"/></th>\r\n                    <th><Translate content=\"account.witness.collateral.expiration\"/></th>\r\n                    <th><Translate content=\"account.witness.collateral.status\"/></th>\r\n                    <th><Translate content=\"account.witness.collateral.operation\"/></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {collateralRows}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\nclass AccountWitness extends React.Component {\r\n\r\n    // static defaultProps = {\r\n    //     dynGlobalObject: '2.1.0',\r\n    //     globalObject: \"2.0.0\",\r\n    //\r\n    // };\r\n    //\r\n    // static propTypes = {\r\n    //     dynGlobalObject: ChainTypes.ChainObject.isRequired,\r\n    //     globalObject: ChainTypes.ChainObject.isRequired,\r\n    // };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            witness: null,\r\n            collateralAmount: \"0\",\r\n            signingKey: \"\",\r\n            witnessUrl: \"\",\r\n            viewStatus:null,\r\n        };\r\n        this.update = this.update.bind(this);\r\n    }\r\n    componentWillMount() {\r\n        ChainStore.subscribe(this.update);\r\n        this.update();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        ChainStore.unsubscribe(this.update);\r\n    }\r\n\r\n    update(obj) {\r\n        let witness = ChainStore.getWitnessById(this.props.account.get(\"id\"));\r\n        if (witness) this.setState({witness: witness.toJS()})\r\n    }\r\n\r\n    openCreateCollateralModal() {\r\n        ZfApi.publish(\"witness_create_collateral\", \"open\");\r\n    }\r\n    closeCreateCollateralModal() {\r\n        ZfApi.publish(\"witness_create_collateral\", \"close\");\r\n    }\r\n    createCollateral(id) {\r\n        var args = {\r\n            witness: id,\r\n            witness_account:  this.props.account.get(\"id\"),\r\n            amount: this.state.collateralAmount * 100000,\r\n        };\r\n        WitnessActions.createCollateral(args);\r\n        this.closeCreateCollateralModal();\r\n    }\r\n\r\n    openWitnessUpdateModal() {\r\n        ZfApi.publish(\"witness_update\", \"open\");\r\n    }\r\n    closeWitnessUpdateModal() {\r\n        ZfApi.publish(\"witness_update\", \"close\");\r\n    }\r\n    updateWitness(id) {\r\n        var args = {\r\n            witness: id,\r\n            witness_account:  this.props.account.get(\"id\"),\r\n            new_url: this.state.witnessUrl,\r\n            new_signing_key: this.state.signingKey,\r\n        };\r\n        WitnessActions.update(args);\r\n        this.closeWitnessUpdateModal();\r\n    }\r\n\r\n    createWitness() {\r\n        var args = {\r\n            witness_account:  this.props.account.get(\"id\"),\r\n            url: this.state.witnessUrl,\r\n            block_signing_key: this.state.signingKey,\r\n        };\r\n        WitnessActions.create(args);\r\n    }\r\n\r\n    claimProfit(witnessId) {\r\n        var args = {\r\n            witness: witnessId,\r\n            witness_account: this.props.account.get(\"id\")\r\n        };\r\n        WitnessActions.claimCollateral(args);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            // dynGlobalObject, globalObject,\r\n            account_name } = this.props;\r\n        let witness = this.state.witness,\r\n            isLifetimeMember = this.props.account.get(\"id\") === this.props.account.get(\"lifetime_referrer\"),\r\n            children;\r\n        if (witness) {\r\n            // let last_aslot_time = new Date(Date.now() - ((dynGlobalObject.get(\"current_aslot\") - witness.last_aslot ) * globalObject.getIn( [\"parameters\",\"block_interval\"] )*1000));\r\n            children = (<div className=\"card-content\">\r\n                <table className=\"table\" style={{width: \"100%\"}}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td><Translate content=\"explorer.witnesses.total_collateral\" /></td>\r\n                            <td><FormattedAsset amount={witness.total_collateral} asset=\"1.3.0\" decimalOffset={5} /></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><Translate content=\"explorer.witnesses.missed\" /></td>\r\n                            <td>{witness.total_missed}</td>\r\n                        </tr>\r\n                        {\r\n                            // <tr>\r\n                            //     <td><Translate content=\"explorer.blocks.last_block\" /></td>\r\n                            //     <td><TimeAgo time={new Date(last_aslot_time)} /></td>\r\n                            // </tr>\r\n                            <tr>\r\n                                <td>URL</td>\r\n                                <td>{witness.url}</td>\r\n                            </tr>\r\n                        }\r\n                        <tr>\r\n                            <td><Translate content=\"account.witness.signing_key\" /></td>\r\n                            <td>{witness.signing_key}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><Translate content=\"explorer.witnesses.collateral_profit\" /></td>\r\n                            <td>\r\n                                <FormattedAsset amount={witness.collateral_profit} asset=\"1.3.0\" decimalOffset={5} />\r\n                                &nbsp;&nbsp;\r\n                                <button onClick={this.claimProfit.bind(this, witness.id)} className=\"button small right\"><Translate content=\"account.witness.collateral.claim\"/></button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <br/>\r\n                <div className=\"content-block\">\r\n                    <button className=\"button\" onClick={this.openWitnessUpdateModal}><Translate content=\"account.witness.update\" /></button>\r\n                </div>\r\n                <h4><Translate content=\"account.witness.collateral.title\"/></h4>\r\n                <CollateralList witnessId={witness.id} collaterals={witness.collaterals}/>\r\n                <br/>\r\n                <div className=\"content-block\">\r\n                    <button className=\"button\" onClick={this.openCreateCollateralModal}><Translate content=\"account.witness.collateral.create\" /></button>\r\n                </div>\r\n\r\n\r\n                <BaseModal id=\"witness_create_collateral\" overlay={true}>\r\n                    <h5><Translate content=\"account.witness.collateral.create\" /></h5>\r\n                    <div className=\"grid-container \" style={{paddingTop: \"2rem\"}}>\r\n                        <AmountSelector\r\n                            label=\"account.witness.collateral.amount\"\r\n                            amount={this.state.collateralAmount}\r\n                            onChange={(v) => this.setState({collateralAmount: v.amount})}\r\n                            asset=\"1.3.0\"\r\n                            assets={[\"1.3.0\"]}\r\n                        />\r\n                        <br/>\r\n                        <div className=\"content-block button-group\">\r\n                            <button className=\"button\" onClick={this.createCollateral.bind(this, witness.id)}>{counterpart.translate(\"submit\")}</button>\r\n                            <button className=\"button\" onClick={this.closeCreateCollateralModal}>{counterpart.translate(\"cancel\")}</button>\r\n                        </div>\r\n                    </div>\r\n                </BaseModal>\r\n                <BaseModal id=\"witness_update\" overlay={true}>\r\n                    <h5><Translate content=\"account.witness.update\"/></h5>\r\n                    <div className=\"grid-container \" style={{paddingTop: \"2rem\"}}>\r\n                        <label>\r\n                            <span><Translate content=\"account.witness.signing_key\"/></span>\r\n                            <input\r\n                                type='text'\r\n                                value={this.state.signingKey}\r\n                                onChange={(e) => this.setState({signingKey: e.target.value})}\r\n                             />\r\n                        </label>\r\n                        {\r\n                            <label>\r\n                                <span>URL</span>\r\n                                 <input\r\n                                     type='text'\r\n                                     value={this.state.witnessUrl}\r\n                                     onChange={(e) => this.setState({witnessUrl: e.target.value})}\r\n                                  />\r\n                            </label>\r\n                        }\r\n                        <br/>\r\n                        <div className=\"content-block button-group\">\r\n                            <button className=\"button\" onClick={this.updateWitness.bind(this, witness.id)}>{counterpart.translate(\"submit\")}</button>\r\n                            <button className=\"button\" onClick={this.closeWitnessUpdateModal}>{counterpart.translate(\"cancel\")}</button>\r\n                        </div>\r\n                    </div>\r\n                </BaseModal>\r\n            </div>)\r\n        } else {\r\n            if(this.state.viewStatus === \"witness_create\"){\r\n                children = (\r\n                  <div>\r\n                    <div className=\"content-block\">\r\n                      <Translate component=\"label\" content=\"account.witness.signing_key\"/>\r\n                      <textarea onChange={(e) => this.setState({signingKey: e.target.value})} style={{height:\"6.69em\",resize: \"none\"}}>{this.state.signingKey}</textarea>\r\n                    </div>\r\n\r\n                    <div className=\"content-block\">\r\n                      <label>URL</label>\r\n                      <input\r\n                        type='text'\r\n                        value={this.state.witnessUrl}\r\n                        onChange={(e) => this.setState({witnessUrl: e.target.value})}\r\n                      />\r\n                    </div>\r\n\r\n                    <button onClick={this.createWitness.bind(this)} className=\"button primary\" style={{marginTop:\"48px\"}}>\r\n                      <Translate content=\"account.witness.create\"/>\r\n                    </button>\r\n                  </div>\r\n                );\r\n            }else{\r\n              children = (<div className=\"content-block\">\r\n                <div className=\"content-block\" style={{textAlign:\"center\",marginTop:\"8em\"}}>\r\n                  <svg className=\"icon\" aria-hidden=\"true\" style={{width:\"5.19em\",height:\"4.35em\",marginBottom:\"10px\"}}>\r\n                    <use xlinkHref=\"#icon-zanwujilu1-copy\"></use>\r\n                  </svg>\r\n                  <p>\r\n                    <Translate content=\"account.witness.not_created\" style={{fontSize:\"14px\",color:\"#999999\"}}/>\r\n                    {!isLifetimeMember && <Link to={`/account/${account_name}/member-stats`} style={{fontSize:\"14px\"}}><Translate content=\"account.witness.not_lifetime_member\"/></Link>}\r\n                  </p>\r\n                  <br/>\r\n                  <button className={`button  primary ${isLifetimeMember ? '' : 'disabled'}`} onClick={e=>this.setState({viewStatus:\"witness_create\"})}><Translate content=\"account.witness.create\" /></button>\r\n                </div>\r\n              </div>)\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"grid-content app-tables no-padding\" ref=\"appTables\">\r\n              <div className=\"content-block small-12\" style={{paddingTop:\"34px\"}}>\r\n                <Translate content=\"account.witness.title\" component=\"h5\" style={{fontWeight:\"bold\"}}/>\r\n                <Translate content=\"account.witness.explain\" component=\"p\" style={{fontSize:\"14px\",color:\"#999\"}}/>\r\n                <Link to={\"\"}> <Translate content=\"account.witness.tips\"/></Link>\r\n                <div style={{marginTop:\"48px\"}}>\r\n                  {children}\r\n                </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAccountWitness = BindToChainState(AccountWitness);\r\n\r\nexport default AccountWitness;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/AccountWitness.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;;;;AAhCA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAwBA;;;AAoBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AANA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAdA;AAFA;AAmBA;AAAA;AAAA;AACA;AADA;AApBA;AA0BA;;;;AAnIA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AALA;AARA;AAiBA;AADA;AACA;AACA;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AASA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAFA;AASA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAJA;AAdA;AAAA;AAsBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AANA;AADA;AA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","sourceRoot":""}