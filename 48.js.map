{"version":3,"file":"48.js","sources":["webpack:///app/components/Utility/Tabs.jsx","webpack:///app/components/Account/AccountVesting.jsx"],"sourcesContent":["import React, {PropTypes} from \"react\";\r\nimport Translate from \"react-translate-component\";\r\nimport cnames from \"classnames\";\r\nimport { connect } from \"alt-react\";\r\nimport SettingsActions from \"actions/SettingsActions\";\r\nimport SettingsStore from \"stores/SettingsStore\";\r\n\r\n/**\r\n *  Renders a tab layout, handling switching and optionally persists the currently open tab using the SettingsStore\r\n *\r\n *  props:\r\n *     setting: unique name to be used to remember the active tab of this tabs layout,\r\n *     tabsClass: optional classes for the tabs container div\r\n *     contentClass: optional classes for the content container div\r\n *\r\n *  Usage:\r\n *\r\n *  <Tabs setting=\"mySetting\">\r\n *      <Tab title=\"locale.string.title1\">Tab 1 content</Tab>\r\n *      <Tab title=\"locale.string.title2\">Tab 2 content</Tab>\r\n *  </Tabs>\r\n *\r\n */\r\n\r\nclass Tab extends React.Component {\r\n\r\n    static propTypes = {\r\n        changeTab: PropTypes.func,\r\n        isActive: PropTypes.bool.isRequired,\r\n        index: PropTypes.number.isRequired,\r\n        className: PropTypes.string,\r\n        isLinkTo: PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        isActive: false,\r\n        index: 0,\r\n        className: \"\",\r\n        isLinkTo: \"\"\r\n    };\r\n\r\n    render() {\r\n        let {isActive, index, changeTab, title, className, disabled} = this.props;\r\n        let c = cnames({\"is-active\": isActive}, className);\r\n\r\n        if (this.props.collapsed) {\r\n            return <option value={index} data-is-link-to={this.props.isLinkTo} >{typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}</option>;\r\n        }\r\n        return (\r\n            <li className={c} onClick={!disabled ? changeTab.bind(this, index,this.props.isLinkTo) : null}>\r\n                <a>\r\n                    {typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}\r\n                    {this.props.subText ? <div className=\"tab-subtext\">{this.props.subText}</div> : null}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tabs extends React.Component {\r\n\r\n    static propTypes = {\r\n        setting: PropTypes.string,\r\n        defaultActiveTab: PropTypes.number,\r\n        segmented: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        active: 0,\r\n        defaultActiveTab: 0,\r\n        segmented: true,\r\n        contentClass: \"\",\r\n        style: {}\r\n    };\r\n\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            activeTab: props.setting ? props.viewSettings.get(props.setting, props.defaultActiveTab) : props.defaultActiveTab,\r\n            width: window.innerWidth\r\n        };\r\n\r\n        this._setDimensions = this._setDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._setDimensions();\r\n        window.addEventListener(\"resize\", this._setDimensions, {capture: false, passive: true});\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let nextSetting = nextProps.viewSettings.get(nextProps.setting);\r\n        if (nextSetting !== this.props.viewSettings.get(this.props.setting)) {\r\n            this.setState({\r\n                activeTab: nextSetting\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this._setDimensions);\r\n    }\r\n\r\n    _setDimensions() {\r\n        let width = window.innerWidth;\r\n\r\n        if (width !== this.state.width) {\r\n            this.setState({width});\r\n        }\r\n    }\r\n\r\n    _changeTab(value,isLinkTo) {\r\n        if (value === this.state.activeTab) return;\r\n        // Persist current tab if desired\r\n\r\n        if (isLinkTo !== \"\") {\r\n            this.context.router.push(isLinkTo);\r\n            return;\r\n        }\r\n\r\n        if (this.props.setting) {\r\n            SettingsActions.changeViewSetting({\r\n                [this.props.setting]: value\r\n            });\r\n        }\r\n        this.setState({activeTab: value});\r\n\r\n        if(this.props.onChangeTab) this.props.onChangeTab(value);\r\n    }\r\n\r\n    render() {\r\n        let {children, contentClass, tabsClass, style, segmented} = this.props;\r\n        const collapseTabs = this.state.width < 900 && React.Children.count(children) > 2;\r\n\r\n        let activeContent = null;\r\n\r\n        let tabIndex = [];\r\n        let tabs = React.Children.map(children, (child, index) => {\r\n            if (!child) {\r\n                return null;\r\n            }\r\n            if (collapseTabs && child.props.disabled) return null;\r\n            let isActive = index === this.state.activeTab;\r\n            if (isActive) {\r\n                activeContent = child.props.children;\r\n            }\r\n\r\n            return React.cloneElement(child, {collapsed: collapseTabs, isActive, changeTab: this._changeTab.bind(this), index: index} );\r\n        }).filter(a => {\r\n            if (a) {\r\n                tabIndex.push(a.props.index);\r\n            }\r\n            return a !== null;\r\n        });\r\n\r\n        if (!activeContent) {\r\n            activeContent = tabs[0].props.children;\r\n        }\r\n\r\n        return (\r\n            <div className={cnames(!!this.props.actionButtons ? \"with-buttons\" : \"\", this.props.className)}>\r\n                <div className=\"service-selector\">\r\n\r\n                    <ul style={style} className={cnames(\"button-group no-margin\", tabsClass, {segmented})}>\r\n                        {collapseTabs ?\r\n                            <li style={{paddingLeft: 10, paddingRight: 10, minWidth: \"15rem\"}}>\r\n                                <select\r\n                                    value={this.state.activeTab}\r\n                                    style={{marginTop: 10, marginBottom: 10}}\r\n                                    className=\"bts-select\"\r\n                                    onChange={(e) => { let ind = parseInt(e.target.value, 10); this._changeTab(ind,e.target[ind].attributes[\"data-is-link-to\"].value);}}\r\n                                >\r\n                                    {tabs}\r\n                                </select>\r\n                            </li> :\r\n                            tabs\r\n                        }\r\n                        {this.props.actionButtons ? <li className=\"tabs-action-buttons\">{this.props.actionButtons}</li> : null}\r\n                    </ul>\r\n                </div>\r\n                <div className={contentClass + \" tab-content\"} >\r\n                    {activeContent}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTabs = connect(Tabs, {\r\n    listenTo() {\r\n        return [SettingsStore];\r\n    },\r\n    getProps() {\r\n        return {viewSettings: SettingsStore.getState().viewSettings};\r\n    }\r\n});\r\n\r\nexport {Tabs, Tab};\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/Tabs.jsx","import React from \"react\";\r\nimport Translate from \"react-translate-component\";\r\nimport FormattedAsset from \"../Utility/FormattedAsset\";\r\nimport {ChainStore} from \"seerjs/es\";\r\nimport utils from \"common/utils\";\r\nimport WalletActions from \"actions/WalletActions\";\r\nimport {Apis} from \"seerjs-ws\";\r\nimport {Tabs, Tab} from \"../Utility/Tabs\";\r\n\r\nclass VestingBalance extends React.Component {\r\n\r\n    _onClaim(claimAll, e) {\r\n        e.preventDefault();\r\n        WalletActions.claimVestingBalance(this.props.account.id, this.props.vb, claimAll).then(() => {\r\n            typeof this.props.handleChanged == 'function' && this.props.handleChanged();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {vb} = this.props;\r\n        if (!this.props.vb) {\r\n            return null;\r\n        }\r\n\r\n        let cvbAsset, vestingPeriod, earned, secondsPerDay = 60 * 60 * 24,\r\n            availablePercent, balance;\r\n        if (vb) {\r\n            balance = vb.balance.amount;\r\n            cvbAsset = ChainStore.getAsset(vb.balance.asset_id);\r\n            earned = vb.policy[1].coin_seconds_earned;\r\n            vestingPeriod = vb.policy[1].vesting_seconds;\r\n\r\n            if(vestingPeriod === 0){\r\n                availablePercent = 1;\r\n            }\r\n            else{\r\n                var localUTCTime = new Date().getTime() + new Date().getTimezoneOffset()*60000;\r\n                var delta_seconds = parseInt((localUTCTime  -new Date(vb.policy[1].coin_seconds_earned_last_update).getTime())/1000);\r\n\r\n                var delta_coin_seconds = parseFloat(balance);\r\n                delta_coin_seconds *= delta_seconds;\r\n\r\n                var withdraw_available = (parseFloat(earned) + delta_coin_seconds) / vestingPeriod\r\n\r\n                if(withdraw_available > balance)\r\n                    withdraw_available = balance\r\n\r\n                availablePercent = withdraw_available / balance;\r\n            }\r\n        }\r\n\r\n        if (!cvbAsset) {\r\n            return null;\r\n        }\r\n\r\n        if (!balance) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Translate component=\"h5\" content=\"account.vesting.balance_number\" id={vb.id} style={{fontSize: \"14px\",color: \"#666\",marginTop:\"52px\",marginBottom:\"42px\"}}/>\r\n\r\n                <table className=\"table key-value-table\">\r\n                    <tbody>\r\n                    <tr>\r\n                        <td><Translate content=\"account.member.cashback\"/></td>\r\n                        <td><FormattedAsset amount={vb.balance.amount} asset={vb.balance.asset_id}/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><Translate content=\"account.member.earned\"/></td>\r\n                        <td>{utils.format_number(utils.get_asset_amount(earned / secondsPerDay, cvbAsset), 0)}\r\n                            &nbsp;<Translate content=\"account.member.coindays\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><Translate content=\"account.member.required\"/></td>\r\n                        <td>{utils.format_number(utils.get_asset_amount(vb.balance.amount * vestingPeriod / secondsPerDay, cvbAsset), 0)}\r\n                            &nbsp;<Translate content=\"account.member.coindays\"/></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><Translate content=\"account.member.remaining\"/></td>\r\n                        <td>{utils.format_number(vestingPeriod * (1 - availablePercent) / secondsPerDay || 0, 2)}\r\n                            &nbsp;days\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><Translate content=\"account.member.available\"/></td>\r\n                        <td>{utils.format_number(availablePercent * 100, 2)}% / <FormattedAsset\r\n                            amount={availablePercent * vb.balance.amount} asset={cvbAsset.get(\"id\")}/></td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <button onClick={this._onClaim.bind(this, false)} className=\"button primary\" style={{marginTop:\"48px\"}}>\r\n                    <Translate content=\"account.member.claim\"/>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass AccountVesting extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            vbs: null\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.retrieveVestingBalances.call(this, this.props.account.get(\"id\"));\r\n    }\r\n\r\n    componentWillUpdate(nextProps) {\r\n        let newId = nextProps.account.get(\"id\");\r\n        let oldId = this.props.account.get(\"id\");\r\n\r\n        if (newId !== oldId) {\r\n            this.retrieveVestingBalances.call(this, newId);\r\n        }\r\n    }\r\n\r\n    retrieveVestingBalances(accountId) {\r\n        accountId = accountId || this.props.account.get(\"id\");\r\n        Apis.instance().db_api().exec(\"get_vesting_balances\", [\r\n            accountId\r\n        ]).then(vbs => {\r\n            this.setState({vbs});\r\n        }).catch(err => {\r\n            console.log(\"error:\", err);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {vbs} = this.state;\r\n        if (!vbs || !this.props.account || !this.props.account.get(\"vesting_balances\")) {\r\n            return null;\r\n        }\r\n\r\n        let account = this.props.account.toJS();\r\n\r\n        let balances = vbs.map(vb => {\r\n            if (vb.balance.amount) {\r\n                return <VestingBalance key={vb.id} vb={vb} account={account}\r\n                                       handleChanged={this.retrieveVestingBalances.bind(this)}/>;\r\n            }\r\n        }).filter(a => {\r\n            return !!a;\r\n        });\r\n\r\n        return (\r\n            <div className=\"grid-content app-tables no-padding\" ref=\"appTables\">\r\n                <div className=\"content-block small-12\" style={{paddingTop:\"34px\"}}>\r\n                  <Translate content=\"account.vesting.title\" component=\"h5\" style={{fontWeight:\"bold\"}}/>\r\n                  <Translate content=\"account.vesting.explain\" component=\"p\" style={{fontSize:\"14px\",color:\"#999\"}}/>\r\n\r\n                  {!balances.length ? (\r\n                    <h4 style={{paddingTop: \"1rem\"}}>\r\n                      <Translate content={\"account.vesting.no_balances\"}/>\r\n                    </h4>) : balances}\r\n                </div>\r\n            </div>    \r\n        );\r\n    }\r\n}\r\n\r\nAccountVesting.VestingBalance = VestingBalance;\r\nexport default AccountVesting;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/AccountVesting.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;;;;AAhCA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAwBA;;;AAoBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AANA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAdA;AAFA;AAmBA;AAAA;AAAA;AACA;AADA;AApBA;AA0BA;;;;AAnIA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AALA;AARA;AAiBA;AADA;AACA;AACA;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAFA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAFA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAFA;AArBA;AADA;AA6BA;AAAA;AAAA;AACA;AADA;AAhCA;AAqCA;;;;AAxFA;AACA;AA0FA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AALA;AADA;AAYA;;;;AA/DA;AACA;AAiEA;AACA;;;;A","sourceRoot":""}