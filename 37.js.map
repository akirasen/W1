{"version":3,"file":"37.js","sources":["webpack:///app/components/Utility/Tabs.jsx","webpack:///app/components/Utility/EquivalentValueComponent.jsx","webpack:///app/components/Account/VotingAccountsList.jsx","webpack:///app/components/Account/AccountVoting.jsx"],"sourcesContent":["import React, {PropTypes} from \"react\";\r\nimport Translate from \"react-translate-component\";\r\nimport cnames from \"classnames\";\r\nimport { connect } from \"alt-react\";\r\nimport SettingsActions from \"actions/SettingsActions\";\r\nimport SettingsStore from \"stores/SettingsStore\";\r\n\r\n/**\r\n *  Renders a tab layout, handling switching and optionally persists the currently open tab using the SettingsStore\r\n *\r\n *  props:\r\n *     setting: unique name to be used to remember the active tab of this tabs layout,\r\n *     tabsClass: optional classes for the tabs container div\r\n *     contentClass: optional classes for the content container div\r\n *\r\n *  Usage:\r\n *\r\n *  <Tabs setting=\"mySetting\">\r\n *      <Tab title=\"locale.string.title1\">Tab 1 content</Tab>\r\n *      <Tab title=\"locale.string.title2\">Tab 2 content</Tab>\r\n *  </Tabs>\r\n *\r\n */\r\n\r\nclass Tab extends React.Component {\r\n\r\n    static propTypes = {\r\n        changeTab: PropTypes.func,\r\n        isActive: PropTypes.bool.isRequired,\r\n        index: PropTypes.number.isRequired,\r\n        className: PropTypes.string,\r\n        isLinkTo: PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        isActive: false,\r\n        index: 0,\r\n        className: \"\",\r\n        isLinkTo: \"\"\r\n    };\r\n\r\n    render() {\r\n        let {isActive, index, changeTab, title, className, disabled} = this.props;\r\n        let c = cnames({\"is-active\": isActive}, className);\r\n\r\n        if (this.props.collapsed) {\r\n            return <option value={index} data-is-link-to={this.props.isLinkTo} >{typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}</option>;\r\n        }\r\n        return (\r\n            <li className={c} onClick={!disabled ? changeTab.bind(this, index,this.props.isLinkTo) : null}>\r\n                <a>\r\n                    {typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}\r\n                    {this.props.subText ? <div className=\"tab-subtext\">{this.props.subText}</div> : null}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tabs extends React.Component {\r\n\r\n    static propTypes = {\r\n        setting: PropTypes.string,\r\n        defaultActiveTab: PropTypes.number,\r\n        segmented: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        active: 0,\r\n        defaultActiveTab: 0,\r\n        segmented: true,\r\n        contentClass: \"\",\r\n        style: {}\r\n    };\r\n\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            activeTab: props.setting ? props.viewSettings.get(props.setting, props.defaultActiveTab) : props.defaultActiveTab,\r\n            width: window.innerWidth\r\n        };\r\n\r\n        this._setDimensions = this._setDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._setDimensions();\r\n        window.addEventListener(\"resize\", this._setDimensions, {capture: false, passive: true});\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let nextSetting = nextProps.viewSettings.get(nextProps.setting);\r\n        if (nextSetting !== this.props.viewSettings.get(this.props.setting)) {\r\n            this.setState({\r\n                activeTab: nextSetting\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this._setDimensions);\r\n    }\r\n\r\n    _setDimensions() {\r\n        let width = window.innerWidth;\r\n\r\n        if (width !== this.state.width) {\r\n            this.setState({width});\r\n        }\r\n    }\r\n\r\n    _changeTab(value,isLinkTo) {\r\n        if (value === this.state.activeTab) return;\r\n        // Persist current tab if desired\r\n\r\n        if (isLinkTo !== \"\") {\r\n            this.context.router.push(isLinkTo);\r\n            return;\r\n        }\r\n\r\n        if (this.props.setting) {\r\n            SettingsActions.changeViewSetting({\r\n                [this.props.setting]: value\r\n            });\r\n        }\r\n        this.setState({activeTab: value});\r\n\r\n        if(this.props.onChangeTab) this.props.onChangeTab(value);\r\n    }\r\n\r\n    render() {\r\n        let {children, contentClass, tabsClass, style, segmented} = this.props;\r\n        const collapseTabs = this.state.width < 900 && React.Children.count(children) > 2;\r\n\r\n        let activeContent = null;\r\n\r\n        let tabIndex = [];\r\n        let tabs = React.Children.map(children, (child, index) => {\r\n            if (!child) {\r\n                return null;\r\n            }\r\n            if (collapseTabs && child.props.disabled) return null;\r\n            let isActive = index === this.state.activeTab;\r\n            if (isActive) {\r\n                activeContent = child.props.children;\r\n            }\r\n\r\n            return React.cloneElement(child, {collapsed: collapseTabs, isActive, changeTab: this._changeTab.bind(this), index: index} );\r\n        }).filter(a => {\r\n            if (a) {\r\n                tabIndex.push(a.props.index);\r\n            }\r\n            return a !== null;\r\n        });\r\n\r\n        if (!activeContent) {\r\n            activeContent = tabs[0].props.children;\r\n        }\r\n\r\n        return (\r\n            <div className={cnames(!!this.props.actionButtons ? \"with-buttons\" : \"\", this.props.className)}>\r\n                <div className=\"service-selector\">\r\n\r\n                    <ul style={style} className={cnames(\"button-group no-margin\", tabsClass, {segmented})}>\r\n                        {collapseTabs ?\r\n                            <li style={{paddingLeft: 10, paddingRight: 10, minWidth: \"15rem\"}}>\r\n                                <select\r\n                                    value={this.state.activeTab}\r\n                                    style={{marginTop: 10, marginBottom: 10}}\r\n                                    className=\"bts-select\"\r\n                                    onChange={(e) => { let ind = parseInt(e.target.value, 10); this._changeTab(ind,e.target[ind].attributes[\"data-is-link-to\"].value);}}\r\n                                >\r\n                                    {tabs}\r\n                                </select>\r\n                            </li> :\r\n                            tabs\r\n                        }\r\n                        {this.props.actionButtons ? <li className=\"tabs-action-buttons\">{this.props.actionButtons}</li> : null}\r\n                    </ul>\r\n                </div>\r\n                <div className={contentClass + \" tab-content\"} >\r\n                    {activeContent}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTabs = connect(Tabs, {\r\n    listenTo() {\r\n        return [SettingsStore];\r\n    },\r\n    getProps() {\r\n        return {viewSettings: SettingsStore.getState().viewSettings};\r\n    }\r\n});\r\n\r\nexport {Tabs, Tab};\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/Tabs.jsx","import React from \"react\";\r\nimport FormattedAsset from \"./FormattedAsset\";\r\nimport ChainTypes from \"./ChainTypes\";\r\nimport BindToChainState from \"./BindToChainState\";\r\nimport utils from \"common/utils\";\r\nimport { connect } from \"alt-react\";\r\nimport MarketsStore from \"stores/MarketsStore\";\r\nimport Translate from \"react-translate-component\";\r\nimport counterpart from \"counterpart\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {MarketStatsCheck} from \"../Utility/EquivalentPrice\";\r\n\r\n/**\r\n *  Given an asset amount, displays the equivalent value in baseAsset if possible\r\n *\r\n *  Expects three properties\r\n *  -'toAsset' which should be a asset id\r\n *  -'fromAsset' which is the asset id of the original asset amount\r\n *  -'amount' which is the amount to convert\r\n *  -'fullPrecision' boolean to tell if the amount uses the full precision of the asset\r\n */\r\n\r\nclass ValueComponent extends MarketStatsCheck {\r\n\r\n    static propTypes = {\r\n        toAsset: ChainTypes.ChainAsset.isRequired,\r\n        fromAsset: ChainTypes.ChainAsset.isRequired,\r\n        coreAsset: ChainTypes.ChainAsset.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        toAsset: \"1.3.0\",\r\n        fullPrecision: true,\r\n        noDecimals: false,\r\n        fullDecimals: false,\r\n        hide_asset: false,\r\n        coreAsset: \"1.3.0\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    shouldComponentUpdate(np) {\r\n        return (\r\n            super.shouldComponentUpdate(np) ||\r\n            np.toAsset !== this.props.toAsset ||\r\n            np.fromAsset !== this.props.fromAsset ||\r\n            np.amount !== this.props.amount\r\n        );\r\n    }\r\n\r\n    getValue() {\r\n        let {amount, toAsset, fromAsset, fullPrecision, marketStats, coreAsset} = this.props;\r\n        let toStats, fromStats;\r\n\r\n        let toID = toAsset.get(\"id\");\r\n        let toSymbol = toAsset.get(\"symbol\");\r\n        let fromID = fromAsset.get(\"id\");\r\n        let fromSymbol = fromAsset.get(\"symbol\");\r\n\r\n        if (!fullPrecision) {\r\n            amount = utils.get_asset_amount(amount, fromAsset);\r\n        }\r\n\r\n        if (coreAsset && marketStats) {\r\n            let coreSymbol = coreAsset.get(\"symbol\");\r\n            toStats = marketStats.get(toSymbol + \"_\" + coreSymbol);\r\n            fromStats = marketStats.get(fromSymbol + \"_\" + coreSymbol);\r\n        }\r\n\r\n        let price = utils.convertPrice(fromStats && fromStats.close ? fromStats.close :\r\n                                        fromID === \"1.3.0\" || fromAsset.has(\"bitasset\") ? fromAsset : null,\r\n                                        toStats && toStats.close ? toStats.close :\r\n                                        (toID === \"1.3.0\" || toAsset.has(\"bitasset\")) ? toAsset : null,\r\n                                        fromID,\r\n                                        toID);\r\n\r\n        let eqValue = price ? utils.convertValue(price, amount, fromAsset, toAsset) : null;\r\n        return eqValue;\r\n    }\r\n\r\n    render() {\r\n        let {amount, toAsset, fromAsset, fullPrecision} = this.props;\r\n\r\n        let toID = toAsset.get(\"id\");\r\n        let toSymbol = toAsset.get(\"symbol\");\r\n\r\n        if (!fullPrecision) {\r\n            amount = utils.get_asset_amount(amount, fromAsset);\r\n        }\r\n\r\n        let eqValue = this.getValue();\r\n\r\n        if (!eqValue && eqValue !== 0) {\r\n            return <div className=\"tooltip inline-block\" data-place=\"bottom\" data-tip={counterpart.translate(\"tooltip.no_price\")} style={{fontSize: \"0.9rem\"}}><Translate content=\"account.no_price\" /></div>;\r\n        }\r\n\r\n        return <FormattedAsset hide_asset={this.props.hide_asset} noPrefix amount={eqValue} asset={toID} decimalOffset={toSymbol.indexOf(\"BTC\") !== -1 ? 4 : this.props.fullDecimals ? 0 : this.props.noDecimals ? toAsset.get(\"precision\") : (toAsset.get(\"precision\") - 2)}/>;\r\n    }\r\n}\r\nValueComponent = BindToChainState(ValueComponent, {keep_updating: true});\r\n\r\nclass EquivalentValueComponent extends React.Component {\r\n    render() {\r\n        let {refCallback, ...others} = this.props;\r\n\r\n        return <ValueComponent {...others} ref={refCallback} />;\r\n    }\r\n}\r\n\r\nEquivalentValueComponent = connect(EquivalentValueComponent, {\r\n    listenTo() {\r\n        return [MarketsStore];\r\n    },\r\n    getProps() {\r\n        return {\r\n            marketStats: MarketsStore.getState().allMarketStats\r\n        };\r\n    }\r\n});\r\n\r\nclass BalanceValueComponent extends React.Component {\r\n\r\n    static propTypes = {\r\n        balance: ChainTypes.ChainObject.isRequired\r\n    }\r\n\r\n    render() {\r\n        const {balance} = this.props;\r\n        const isBalanceObject = !!balance.getIn([\"balance\", \"amount\"]);\r\n\r\n        let amount = Number(isBalanceObject ? balance.getIn([\"balance\", \"amount\"]) : balance.get(\"balance\"));\r\n        let fromAsset = isBalanceObject ? balance.getIn([\"balance\", \"asset_id\"]) : balance.get(\"asset_type\");\r\n        if (isNaN(amount)) return <span>--</span>;\r\n        return <EquivalentValueComponent refCallback={this.props.refCallback} hide_asset={this.props.hide_asset} amount={amount} fromAsset={fromAsset} noDecimals={true} toAsset={this.props.toAsset}/>;\r\n    }\r\n}\r\nBalanceValueComponent = BindToChainState(BalanceValueComponent, {keep_updating: true});\r\nexport {EquivalentValueComponent, BalanceValueComponent};\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/EquivalentValueComponent.jsx","import React from \"react\";\r\nimport AccountSelector from \"./AccountSelector\";\r\nimport Translate from \"react-translate-component\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport {ChainStore} from \"seerjs/es\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport FormattedAsset from \"../Utility/FormattedAsset\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport LinkToAccountById from \"../Utility/LinkToAccountById\";\r\nimport counterpart from \"counterpart\";\r\n\r\nfunction getWitnessOrCommittee(type, acct) {\r\n    let url = \"\", votes = 0, account;\r\n    if (type === \"witness\") {\r\n        account = ChainStore.getWitnessById(acct.get(\"id\"));\r\n    } else if (type === \"committee\") {\r\n        account = ChainStore.getCommitteeMemberById(acct.get(\"id\"));\r\n    }\r\n\r\n    url = account ? account.get(\"url\") : url;\r\n    votes = account ? account.get(\"total_votes\") : votes;\r\n    return {\r\n        url,\r\n        votes,\r\n        id: account.get(\"id\")\r\n    };\r\n}\r\n\r\nclass AccountItemRow extends React.Component {\r\n    static propTypes = {\r\n        account: React.PropTypes.object.isRequired,\r\n        onAction: React.PropTypes.func.isRequired\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return (\r\n            nextProps.account !== this.props.account ||\r\n            nextProps.action !== this.props.action ||\r\n            nextProps.isActive !== this.props.isActive ||\r\n            nextProps.idx !== this.props.idx ||\r\n            nextProps.proxy !== this.props.proxy\r\n        );\r\n    }\r\n\r\n    onAction(item_id){\r\n        this.props.onAction(item_id);\r\n    }\r\n\r\n    render() {\r\n        let {account, type, action, isActive} = this.props;\r\n        let item_id = account.get(\"id\");\r\n\r\n        let {url, votes} = getWitnessOrCommittee(type, account);\r\n\r\n        let link = url && url.length > 0 && url.indexOf(\"http\") === -1 ? \"http://\" + url : url;\r\n        const isSupported = action === \"remove\";\r\n        return (\r\n            <tr className={(isSupported ? \"\": \"unsupported\")}>\r\n                <td style={{textAlign: \"right\"}}>\r\n                    {this.props.idx + 1}\r\n                </td>\r\n                <td style={{textAlign: \"left\"}}><LinkToAccountById account={account.get(\"id\")} /></td>\r\n                <td>\r\n                    {link && link.indexOf(\".\") !== -1 ?\r\n                    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <Icon name=\"share\" />\r\n                    </a> : null}\r\n                </td>\r\n                <td><FormattedAsset amount={votes} asset=\"1.3.0\" decimalOffset={5} hide_asset /></td>\r\n                <td><Translate content={`account.votes.${isActive ? \"active_short\" : \"inactive\"}`} /></td>\r\n                <td style={{textAlign: \"center\"}}><Translate content={`settings.${isSupported ? \"yes\" : \"no\"}`}/></td>\r\n                <td className={this.props.proxy ? \"\" : \"clickable\"} onClick={this.props.proxy ? () => {} : this.onAction.bind(this, item_id)}>\r\n                    {!this.props.proxy ?\r\n                        <Icon name={isSupported ? \"checkmark-circle\" : \"minus-circle\"} /> :\r\n                        <Icon name=\"locked\" />\r\n                }\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nclass VotingAccountsList extends React.Component {\r\n\r\n    static propTypes = {\r\n        items: ChainTypes.ChainObjectsList,\r\n        onAddItem: React.PropTypes.func.isRequired,\r\n        onRemoveItem: React.PropTypes.func.isRequired,\r\n        validateAccount: React.PropTypes.func,\r\n        label: React.PropTypes.string.isRequired, // a translation key for the label,\r\n        placeholder: React.PropTypes.string, // the placeholder text to be displayed when there is no user_input\r\n        tabIndex: React.PropTypes.number, // tabindex property to be passed to input tag\r\n        action: React.PropTypes.string,\r\n        withSelector: React.PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        action: \"remove\",\r\n        withSelector: true,\r\n        autosubscribe: false\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected_item: null,\r\n            item_name_input: \"\",\r\n            error: null\r\n        };\r\n        this.onItemChange = this.onItemChange.bind(this);\r\n        this.onItemAccountChange = this.onItemAccountChange.bind(this);\r\n        this.onAddItem = this.onAddItem.bind(this);\r\n    }\r\n\r\n    onItemChange(item_name_input) {\r\n        this.setState({item_name_input});\r\n    }\r\n\r\n    onItemAccountChange(selected_item) {\r\n        this.setState({selected_item, error: null});\r\n        if(selected_item && this.props.validateAccount) {\r\n            let res = this.props.validateAccount(selected_item);\r\n            if(res === null) return;\r\n            if(typeof(res) === \"string\") this.setState({error: res});\r\n            else res.then(error => this.setState({error: error}));\r\n        }\r\n    }\r\n\r\n    onAddItem(item) {\r\n        if(!item) return;\r\n        let next_state = {\r\n            selected_item: null,\r\n            item_name_input: \"\",\r\n            error: null\r\n        };\r\n        this.setState(next_state);\r\n        this.props.onAddItem(item.get(\"id\"));\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.items) return null;\r\n\r\n        let item_rows = this.props.items.filter(i => {\r\n            if (!i) return false;\r\n            //if (this.state.item_name_input) return i.get(\"name\").indexOf(this.state.item_name_input) !== -1;\r\n            return true;\r\n        })\r\n        .sort((a,b) =>{\r\n            let {votes: a_votes} = getWitnessOrCommittee(this.props.type, a);\r\n            let {votes: b_votes} = getWitnessOrCommittee(this.props.type, b);\r\n            if (a_votes !== b_votes) {\r\n                return b_votes - a_votes;\r\n            }\r\n            else if( a.get(\"name\") > b.get(\"name\") ) {\r\n                return 1;\r\n            }\r\n            else if ( a.get(\"name\") < b.get(\"name\") ) {\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        })\r\n        .map((i, idx) => {\r\n            let action = this.props.supported && this.props.supported.includes(i.get(\"id\")) ? \"remove\" : \"add\";\r\n            let isActive = this.props.active.includes(getWitnessOrCommittee(this.props.type, i).id);\r\n            return (\r\n                <AccountItemRow\r\n                    idx={idx}\r\n                    key={i.get(\"name\")}\r\n                    account={i}\r\n                    type={this.props.type}\r\n                    onAction={action === \"add\" ? this.props.onAddItem : this.props.onRemoveItem}\r\n                    isSelected={this.props.items.indexOf(i) !== -1}\r\n                    action={action}\r\n                    isActive={isActive}\r\n                    proxy={this.props.proxy}\r\n                />\r\n            );\r\n        });\r\n\r\n        let error = this.state.error;\r\n        if(!error && this.state.selected_item && this.props.items.indexOf(this.state.selected_item) !== -1) {\r\n            error = counterpart.translate(\"account.votes.already\");\r\n        }\r\n\r\n        let cw = [\"10%\", \"20%\", \"40%\", \"20%\", \"10%\"];\r\n\r\n        return (\r\n            <div>\r\n                {this.props.withSelector ?\r\n                <AccountSelector\r\n                    style={{maxWidth: \"600px\"}}\r\n                    label={this.props.label}\r\n                    error={error}\r\n                    placeholder={this.props.placeholder}\r\n                    account={this.state.item_name_input}\r\n                    accountName={this.state.item_name_input}\r\n                    onChange={this.onItemChange}\r\n                    onAccountChanged={this.onItemAccountChange}\r\n                    onAction={this.onAddItem}\r\n                    action_label=\"account.votes.add_witness\"\r\n                    tabIndex={this.props.tabIndex}\r\n                /> : null}\r\n                {this.props.title && item_rows.length ? <h4>{this.props.title}</h4> : null}\r\n                {item_rows.length ? (\r\n                <table className=\"table dashboard-table table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{textAlign: \"right\"}}>#</th>\r\n                            <th style={{textAlign: \"left\", maxWidth: cw[1]}}><Translate content=\"account.votes.name\" /></th>\r\n                            <th style={{maxWidth: cw[2]}}><Translate content=\"account.votes.about\"/></th>\r\n                            <th style={{maxWidth: cw[3]}}><Translate content=\"account.votes.votes\" /></th>\r\n                            <th style={{maxWidth: cw[4]}}><Translate content=\"account.votes.status.title\" /></th>\r\n                            <th style={{maxWidth: cw[0]}}><Translate content=\"account.votes.supported\"/></th>\r\n                            <th style={{maxWidth: cw[5]}}><Translate content=\"account.votes.toggle\" /></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {item_rows}\r\n                    </tbody>\r\n                </table>) : null}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default BindToChainState(VotingAccountsList, {keep_updating: true});\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/VotingAccountsList.jsx","import React from \"react\";\r\nimport Immutable from \"immutable\";\r\nimport Translate from \"react-translate-component\";\r\nimport accountUtils from \"common/account_utils\";\r\nimport {ChainStore, FetchChainObjects} from \"seerjs/es\";\r\nimport VotingAccountsList from \"./VotingAccountsList\";\r\nimport cnames from \"classnames\";\r\nimport {Tabs, Tab} from \"../Utility/Tabs\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport {Link} from \"react-router/es\";\r\nimport ApplicationApi from \"api/ApplicationApi\";\r\nimport AccountSelector from \"./AccountSelector\";\r\nimport Icon from \"../Icon/Icon\";\r\nimport AssetName from \"../Utility/AssetName\";\r\nimport counterpart from \"counterpart\";\r\nimport {EquivalentValueComponent} from \"../Utility/EquivalentValueComponent\";\r\nimport FormattedAsset from \"../Utility/FormattedAsset\";\r\nimport SettingsStore from \"stores/SettingsStore\";\r\n\r\nclass AccountVoting extends React.Component {\r\n\r\n    static propTypes = {\r\n        globalObject: ChainTypes.ChainObject.isRequired,\r\n        proxy: ChainTypes.ChainAccount.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        globalObject: \"2.0.0\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const proxyId = props.proxy.get(\"id\");\r\n        const proxyName = props.proxy.get(\"name\");\r\n        this.state = {\r\n            proxy_account_id: proxyId === \"1.2.5\" ? \"\": proxyId,//\"1.2.16\",\r\n            prev_proxy_account_id: proxyId === \"1.2.5\" ? \"\": proxyId,\r\n            current_proxy_input: proxyId === \"1.2.5\" ? \"\" : proxyName,\r\n            committee: null,\r\n            vote_ids: Immutable.Set(),\r\n            proxy_vote_ids: Immutable.Set(),\r\n            all_committee: Immutable.List()\r\n        };\r\n        this.onProxyAccountFound = this.onProxyAccountFound.bind(this);\r\n        this.onPublish = this.onPublish.bind(this);\r\n        this.onReset = this.onReset.bind(this);\r\n        this._getVoteObjects = this._getVoteObjects.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        accountUtils.getFinalFeeAsset(this.props.account, \"account_update\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateAccountData(this.props);\r\n        this._getVoteObjects();\r\n        this._getVoteObjects(\"committee\");\r\n    }\r\n\r\n    componentWillReceiveProps(np) {\r\n        if (np.account !== this.props.account) {\r\n            const proxyId = np.proxy.get(\"id\");\r\n            let newState = {\r\n                proxy_account_id: proxyId === \"1.2.5\" ? \"\": proxyId\r\n            };\r\n            this.setState({prev_proxy_account_id: newState.proxy_account_id});\r\n            this.updateAccountData(np, newState);\r\n        }\r\n    }\r\n\r\n    updateAccountData({account}, state = this.state) {\r\n        let {proxy_account_id} = state;\r\n        const proxy = ChainStore.getAccount(proxy_account_id);\r\n        let options = account.get(\"options\");\r\n        let proxyOptions = proxy ? proxy.get(\"options\") : null;\r\n        // let proxy_account_id = proxy ? proxy.get(\"id\") : \"1.2.5\";\r\n        let current_proxy_input = proxy ? proxy.get(\"name\") : \"\";\r\n        if (proxy_account_id === \"1.2.5\" ) {\r\n            proxy_account_id = \"\";\r\n            current_proxy_input = \"\";\r\n        }\r\n\r\n        let votes = options.get(\"votes\");\r\n        let vote_ids = votes.toArray();\r\n        let vids = Immutable.Set( vote_ids );\r\n        // ChainStore.getObjectsByVoteIds(vote_ids);\r\n\r\n        let proxyPromise = null, proxy_vids = Immutable.Set([]);\r\n        const hasProxy = proxy_account_id !== \"1.2.5\";\r\n        if (hasProxy && proxyOptions) {\r\n            let proxy_votes = proxyOptions.get(\"votes\");\r\n            let proxy_vote_ids = proxy_votes.toArray();\r\n            proxy_vids = Immutable.Set( proxy_vote_ids );\r\n            proxyPromise = FetchChainObjects(ChainStore.getObjectByVoteID, proxy_vote_ids, 5000);\r\n        }\r\n\r\n        Promise.all([\r\n            FetchChainObjects(ChainStore.getObjectByVoteID, vote_ids, 5000),\r\n            proxyPromise\r\n        ]).then(res => {\r\n            const [vote_objs, proxy_vote_objs] = res;\r\n            function sortVoteObjects(objects) {\r\n                let committee = new Immutable.List();\r\n                objects.forEach( obj => {\r\n                    let account_id = obj.get(\"committee_member_account\");\r\n                    if (account_id) {\r\n                        committee = committee.push(account_id);\r\n                    }\r\n                });\r\n\r\n                return {committee};\r\n            }\r\n\r\n            let {committee} = sortVoteObjects(vote_objs);\r\n            let { committee: proxy_committee} = sortVoteObjects(proxy_vote_objs || []);\r\n            let state = {\r\n                proxy_account_id,\r\n                current_proxy_input,\r\n                committee: committee,\r\n                proxy_committee: proxy_committee,\r\n                vote_ids: vids,\r\n                proxy_vote_ids: proxy_vids,\r\n                prev_committee: committee,\r\n                prev_vote_ids : vids\r\n            };\r\n            this.setState(state);\r\n        });\r\n    }\r\n\r\n    isChanged(s = this.state) {\r\n        return s.proxy_account_id !== s.prev_proxy_account_id ||\r\n               s.committee !== s.prev_committee ||\r\n               !Immutable.is(s.vote_ids, s.prev_vote_ids);\r\n    }\r\n\r\n    _getVoteObjects(type = \"committee\", vote_ids) {\r\n        let current = this.state[`all_${type}`];\r\n        let lastIdx;\r\n        if (!vote_ids) {\r\n            vote_ids = [];\r\n            let active = this.props.globalObject.get(\"active_committee_members\");\r\n            const lastActive = active.last() || `1.4.0`;\r\n            lastIdx = parseInt(lastActive.split(\".\")[2], 10);\r\n            for (var i = 0; i <= lastIdx + 10; i++) {\r\n                vote_ids.push(`1.4.${i}`);\r\n            }\r\n        } else {\r\n            lastIdx = parseInt(vote_ids[vote_ids.length - 1].split(\".\")[2], 10);\r\n        }\r\n        FetchChainObjects(ChainStore.getObject, vote_ids, 5000, {}).then(vote_objs => {\r\n            this.state[`all_${type}`] = current.concat(Immutable.List(vote_objs.filter(a => !!a).map(a => a.get(\"committee_member_account\"))));\r\n            if (!!vote_objs[vote_objs.length - 1]) { // there are more valid vote objs, fetch more\r\n                vote_ids = [];\r\n                for (var i = lastIdx + 11; i <= lastIdx + 20; i++) {\r\n                    vote_ids.push(`1.4.${i}`);\r\n                }\r\n                return this._getVoteObjects(type, vote_ids);\r\n            }\r\n            this.forceUpdate();\r\n        });\r\n    }\r\n\r\n    onPublish() {\r\n        let updated_account = this.props.account.toJS();\r\n        let updateObject = {account: updated_account.id};\r\n        let new_options = {memo_key: updated_account.options.memo_key};\r\n        // updated_account.new_options = updated_account.options;\r\n        let new_proxy_id = this.state.proxy_account_id;\r\n        new_options.voting_account = new_proxy_id ? new_proxy_id : \"1.2.5\";\r\n        new_options.num_committee = this.state.committee.size;\r\n        new_options.num_authenticator = 0;\r\n        new_options.num_supervisor = 0;\r\n\r\n        updateObject.new_options = new_options;\r\n        // Set fee asset\r\n        updateObject.fee = {\r\n            amount: 0,\r\n            asset_id: accountUtils.getFinalFeeAsset(updated_account.id, \"account_update\")\r\n        };\r\n\r\n        let {vote_ids} = this.state;\r\n        let now = new Date();\r\n\r\n        function removeVote(list, vote) {\r\n            if (list.includes(vote)) {\r\n                list = list.delete(vote);\r\n            }\r\n            return list;\r\n        }\r\n\r\n        // Submit votes\r\n        FetchChainObjects(ChainStore.getCommitteeMemberById, this.state.committee.toArray(), 4000).then( res => {\r\n            let committee_vote_ids = res.map(o => o.get(\"vote_id\"));\r\n            return Promise.resolve(committee_vote_ids);\r\n        }).then( res => {\r\n            updateObject.new_options.votes = res\r\n                .sort((a, b) => {\r\n                    let a_split = a.split(\":\");\r\n                    let b_split = b.split(\":\");\r\n\r\n                    return parseInt(a_split[1], 10) - parseInt(b_split[1], 10);\r\n                });\r\n            ApplicationApi.updateAccount(updateObject);\r\n        });\r\n    }\r\n\r\n    onReset() {\r\n        let s = this.state;\r\n        if (this.refs.voting_proxy && this.refs.voting_proxy.refs.bound_component) this.refs.voting_proxy.refs.bound_component.onResetProxy();\r\n        this.setState({\r\n            proxy_account_id: s.prev_proxy_account_id,\r\n            current_proxy_input: s.prev_proxy_input,\r\n            committee: s.prev_committee,\r\n            vote_ids: s.prev_vote_ids\r\n        }, () => {\r\n            this.updateAccountData(this.props);\r\n        });\r\n    }\r\n\r\n    onAddItem(collection, item_id){\r\n        let state = {};\r\n        state[collection] = this.state[collection].push(item_id);\r\n        this.setState(state);\r\n    }\r\n\r\n    onRemoveItem(collection, item_id){\r\n        let state = {};\r\n        state[collection] = this.state[collection].filter(i => i !== item_id);\r\n        this.setState(state);\r\n    }\r\n\r\n    onChangeVotes( addVotes, removeVotes) {\r\n        let state = {};\r\n        state.vote_ids = this.state.vote_ids;\r\n        if (addVotes.length) {\r\n            addVotes.forEach(vote => {\r\n                state.vote_ids = state.vote_ids.add(vote);\r\n            });\r\n\r\n        }\r\n        if (removeVotes) {\r\n            removeVotes.forEach(vote => {\r\n                state.vote_ids = state.vote_ids.delete(vote);\r\n            });\r\n        }\r\n\r\n        this.setState(state);\r\n    }\r\n\r\n    validateAccount(collection, account) {\r\n        console.log(account);\r\n        if(!account) return null;\r\n        if(collection === \"committee\") {\r\n            return FetchChainObjects(ChainStore.getCommitteeMemberById, [account.get(\"id\")], 3000).then(res => {\r\n                return res[0] ? null : \"Not a committee member\";\r\n            });\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onProxyChange(current_proxy_input) {\r\n        let proxyAccount = ChainStore.getAccount(current_proxy_input);\r\n        if (!proxyAccount || proxyAccount && proxyAccount.get(\"id\") !== this.state.proxy_account_id) {\r\n            this.setState({\r\n                proxy_account_id: \"\",\r\n                proxy_committee: Immutable.Set()\r\n            });\r\n        }\r\n        this.setState({current_proxy_input});\r\n    }\r\n\r\n    onProxyAccountFound(proxy_account) {\r\n        this.setState({\r\n            proxy_account_id: proxy_account ? proxy_account.get(\"id\") : \"\"\r\n        }, () => {\r\n            this.updateAccountData(this.props);\r\n        });\r\n    }\r\n\r\n    onClearProxy() {\r\n        this.setState({\r\n            proxy_account_id: \"\"\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        let preferredUnit = this.props.settings.get(\"unit\") || \"1.3.0\";\r\n        let hasProxy = !!this.state.proxy_account_id; // this.props.account.getIn([\"options\", \"voting_account\"]) !== \"1.2.5\";\r\n        let publish_buttons_class = cnames(\"button\", {disabled : !this.isChanged()});\r\n        let {globalObject} = this.props;\r\n\r\n        let now = new Date();\r\n\r\n        let voteThreshold = 0;\r\n\r\n\r\n        let actionButtons = (\r\n            <span>\r\n                <button className={cnames(publish_buttons_class, {success: this.isChanged()})} onClick={this.onPublish} tabIndex={4}>\r\n                    <Translate content=\"account.votes.publish\"/>\r\n                </button>\r\n                <button className={\"button \" + publish_buttons_class} onClick={this.onReset} tabIndex={8}>\r\n                    <Translate content=\"account.perm.reset\"/>\r\n                </button>\r\n            </span>\r\n        );\r\n\r\n        let proxyInput = (\r\n            <AccountSelector\r\n                hideImage\r\n                style={{width: \"50%\", maxWidth: 250}}\r\n                account={this.state.current_proxy_input}\r\n                accountName={this.state.current_proxy_input}\r\n                onChange={this.onProxyChange.bind(this)}\r\n                onAccountChanged={this.onProxyAccountFound}\r\n                tabIndex={1}\r\n                placeholder=\"Proxy not set\"\r\n        >\r\n            <span style={{paddingLeft: 5, position: \"relative\", top: -1, display: (hasProxy ? \"\" : \"none\")}}><Icon name=\"locked\" size=\"1x\" /></span>\r\n            <span style={{paddingLeft: 5, position: \"relative\", top: 9, display: (!hasProxy ? \"\" : \"none\")}}><Link to=\"/help/voting\"><Icon name=\"question-circle\" size=\"1x\" /></Link></span>\r\n        </AccountSelector>);\r\n\r\n        const saveText = (\r\n            <div className=\"inline-block\" style={{float: \"right\", visibility: this.isChanged() ? \"visible\": \"hidden\", color: \"red\", padding: \"0.85rem\", fontSize: \"0.9rem\"}}>\r\n                <Translate content=\"account.votes.save_finish\" />\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"grid-content app-tables no-padding\" ref=\"appTables\">\r\n                <div className=\"content-block small-12\">\r\n                    <div className=\"tabs-container generic-bordered-box\">\r\n\r\n                        <Tabs\r\n                            setting=\"votingTab\"\r\n                            className=\"account-tabs\"\r\n                            defaultActiveTab={0}\r\n                            segmented={false}\r\n                            actionButtons={saveText}\r\n                            tabsClass=\"account-overview no-padding bordered-header content-block\"\r\n                        >\r\n\r\n                            <Tab title=\"explorer.committee_members.title\">\r\n                                <div className={cnames(\"content-block\")}>\r\n                                    <div className=\"header-selector\">\r\n                                        {/* <Link to=\"/help/voting/committee\"><Icon name=\"question-circle\" /></Link> */}\r\n                                        {proxyInput}\r\n                                        <div style={{float: \"right\", marginTop: \"-2.5rem\"}}>{actionButtons}</div>\r\n                                    </div>\r\n                                    <VotingAccountsList\r\n                                        type=\"committee\"\r\n                                        label=\"account.votes.add_committee_label\"\r\n                                        items={this.state.all_committee}\r\n                                        validateAccount={this.validateAccount.bind(this, \"committee\")}\r\n                                        onAddItem={this.onAddItem.bind(this, \"committee\")}\r\n                                        onRemoveItem={this.onRemoveItem.bind(this, \"committee\")}\r\n                                        tabIndex={hasProxy ? -1 : 3}\r\n                                        supported={this.state[hasProxy ? \"proxy_committee\" : \"committee\"]}\r\n                                        withSelector={false}\r\n                                        active={globalObject.get(\"active_committee_members\")}\r\n                                        proxy={this.state.proxy_account_id}\r\n                                    />\r\n                                </div>\r\n                            </Tab>\r\n\r\n                        </Tabs>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nAccountVoting = BindToChainState(AccountVoting);\r\n\r\nconst BudgetObjectWrapper = (props) => {\r\n    return <AccountVoting {...props} />;\r\n};\r\n\r\nexport default BudgetObjectWrapper;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/AccountVoting.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;;;;AAhCA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAwBA;;;AAoBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AANA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAdA;AAFA;AAmBA;AAAA;AAAA;AACA;AADA;AApBA;AA0BA;;;;AAnIA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AALA;AARA;AAiBA;AADA;AACA;AACA;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;AAiBA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAMA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;AAjFA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AA0EA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;AAUA;;;;;;;;;;;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAdA;AACA;AADA;AAGA;AADA;AACA;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;;;;;;;AAMA;AACA;AAOA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAdA;AAsBA;;;;AAnDA;AACA;AADA;AAEA;AACA;AAFA;AACA;AAoDA;;;AAoBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AAWA;AAAA;AAAA;AACA;AADA;AAZA;AAjBA;AAmCA;;;;AA7IA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAeA;AACA;AACA;AAHA;AACA;AACA;AAiIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAWA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAhBA;AAiBA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AACA;AADA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;;;AAEA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAdA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAGA;AACA;AACA;AACA;AAHA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AACA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AACA;AAaA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AANA;AADA;AATA;AAFA;AADA;AADA;AAyCA;;;;AAhWA;AACA;AADA;AAGA;AACA;AAFA;AAFA;AAQA;AADA;AACA;AA0VA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}