{"version":3,"file":"47.js","sources":["webpack:///app/components/Utility/Tabs.jsx","webpack:///app/components/Account/AccountWhitelist.jsx"],"sourcesContent":["import React, {PropTypes} from \"react\";\r\nimport Translate from \"react-translate-component\";\r\nimport cnames from \"classnames\";\r\nimport { connect } from \"alt-react\";\r\nimport SettingsActions from \"actions/SettingsActions\";\r\nimport SettingsStore from \"stores/SettingsStore\";\r\n\r\n/**\r\n *  Renders a tab layout, handling switching and optionally persists the currently open tab using the SettingsStore\r\n *\r\n *  props:\r\n *     setting: unique name to be used to remember the active tab of this tabs layout,\r\n *     tabsClass: optional classes for the tabs container div\r\n *     contentClass: optional classes for the content container div\r\n *\r\n *  Usage:\r\n *\r\n *  <Tabs setting=\"mySetting\">\r\n *      <Tab title=\"locale.string.title1\">Tab 1 content</Tab>\r\n *      <Tab title=\"locale.string.title2\">Tab 2 content</Tab>\r\n *  </Tabs>\r\n *\r\n */\r\n\r\nclass Tab extends React.Component {\r\n\r\n    static propTypes = {\r\n        changeTab: PropTypes.func,\r\n        isActive: PropTypes.bool.isRequired,\r\n        index: PropTypes.number.isRequired,\r\n        className: PropTypes.string,\r\n        isLinkTo: PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        isActive: false,\r\n        index: 0,\r\n        className: \"\",\r\n        isLinkTo: \"\"\r\n    };\r\n\r\n    render() {\r\n        let {isActive, index, changeTab, title, className, disabled} = this.props;\r\n        let c = cnames({\"is-active\": isActive}, className);\r\n\r\n        if (this.props.collapsed) {\r\n            return <option value={index} data-is-link-to={this.props.isLinkTo} >{typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}</option>;\r\n        }\r\n        return (\r\n            <li className={c} onClick={!disabled ? changeTab.bind(this, index,this.props.isLinkTo) : null}>\r\n                <a>\r\n                    {typeof title === \"string\" && title.indexOf(\".\") > 0 ? <Translate className=\"tab-title\" content={title} /> : <span className=\"tab-title\">{title}</span>}\r\n                    {this.props.subText ? <div className=\"tab-subtext\">{this.props.subText}</div> : null}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Tabs extends React.Component {\r\n\r\n    static propTypes = {\r\n        setting: PropTypes.string,\r\n        defaultActiveTab: PropTypes.number,\r\n        segmented: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        active: 0,\r\n        defaultActiveTab: 0,\r\n        segmented: true,\r\n        contentClass: \"\",\r\n        style: {}\r\n    };\r\n\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            activeTab: props.setting ? props.viewSettings.get(props.setting, props.defaultActiveTab) : props.defaultActiveTab,\r\n            width: window.innerWidth\r\n        };\r\n\r\n        this._setDimensions = this._setDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._setDimensions();\r\n        window.addEventListener(\"resize\", this._setDimensions, {capture: false, passive: true});\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let nextSetting = nextProps.viewSettings.get(nextProps.setting);\r\n        if (nextSetting !== this.props.viewSettings.get(this.props.setting)) {\r\n            this.setState({\r\n                activeTab: nextSetting\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this._setDimensions);\r\n    }\r\n\r\n    _setDimensions() {\r\n        let width = window.innerWidth;\r\n\r\n        if (width !== this.state.width) {\r\n            this.setState({width});\r\n        }\r\n    }\r\n\r\n    _changeTab(value,isLinkTo) {\r\n        if (value === this.state.activeTab) return;\r\n        // Persist current tab if desired\r\n\r\n        if (isLinkTo !== \"\") {\r\n            this.context.router.push(isLinkTo);\r\n            return;\r\n        }\r\n\r\n        if (this.props.setting) {\r\n            SettingsActions.changeViewSetting({\r\n                [this.props.setting]: value\r\n            });\r\n        }\r\n        this.setState({activeTab: value});\r\n\r\n        if(this.props.onChangeTab) this.props.onChangeTab(value);\r\n    }\r\n\r\n    render() {\r\n        let {children, contentClass, tabsClass, style, segmented} = this.props;\r\n        const collapseTabs = this.state.width < 900 && React.Children.count(children) > 2;\r\n\r\n        let activeContent = null;\r\n\r\n        let tabIndex = [];\r\n        let tabs = React.Children.map(children, (child, index) => {\r\n            if (!child) {\r\n                return null;\r\n            }\r\n            if (collapseTabs && child.props.disabled) return null;\r\n            let isActive = index === this.state.activeTab;\r\n            if (isActive) {\r\n                activeContent = child.props.children;\r\n            }\r\n\r\n            return React.cloneElement(child, {collapsed: collapseTabs, isActive, changeTab: this._changeTab.bind(this), index: index} );\r\n        }).filter(a => {\r\n            if (a) {\r\n                tabIndex.push(a.props.index);\r\n            }\r\n            return a !== null;\r\n        });\r\n\r\n        if (!activeContent) {\r\n            activeContent = tabs[0].props.children;\r\n        }\r\n\r\n        return (\r\n            <div className={cnames(!!this.props.actionButtons ? \"with-buttons\" : \"\", this.props.className)}>\r\n                <div className=\"service-selector\">\r\n\r\n                    <ul style={style} className={cnames(\"button-group no-margin\", tabsClass, {segmented})}>\r\n                        {collapseTabs ?\r\n                            <li style={{paddingLeft: 10, paddingRight: 10, minWidth: \"15rem\"}}>\r\n                                <select\r\n                                    value={this.state.activeTab}\r\n                                    style={{marginTop: 10, marginBottom: 10}}\r\n                                    className=\"bts-select\"\r\n                                    onChange={(e) => { let ind = parseInt(e.target.value, 10); this._changeTab(ind,e.target[ind].attributes[\"data-is-link-to\"].value);}}\r\n                                >\r\n                                    {tabs}\r\n                                </select>\r\n                            </li> :\r\n                            tabs\r\n                        }\r\n                        {this.props.actionButtons ? <li className=\"tabs-action-buttons\">{this.props.actionButtons}</li> : null}\r\n                    </ul>\r\n                </div>\r\n                <div className={contentClass + \" tab-content\"} >\r\n                    {activeContent}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTabs = connect(Tabs, {\r\n    listenTo() {\r\n        return [SettingsStore];\r\n    },\r\n    getProps() {\r\n        return {viewSettings: SettingsStore.getState().viewSettings};\r\n    }\r\n});\r\n\r\nexport {Tabs, Tab};\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Utility/Tabs.jsx","import React from \"react\";\r\nimport {Tabs, Tab} from \"../Utility/Tabs\";\r\nimport constants from \"chain/account_constants.js\";\r\nimport AccountSelector from \"../Account/AccountSelector\";\r\nimport Immutable from \"immutable\";\r\nimport Translate from \"react-translate-component\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport LinkToAccountById from \"../Utility/LinkToAccountById\";\r\nimport WalletApi from \"api/WalletApi\";\r\nimport WalletDb from \"stores/WalletDb.js\";\r\n\r\nclass AccountRow extends React.Component {\r\n\r\n    static propTypes = {\r\n        account: ChainTypes.ChainAccount.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        tempComponent: \"tr\"\r\n    };\r\n\r\n    render() {\r\n        let {account, onRemove} = this.props;\r\n\r\n        return (\r\n            <tr>\r\n                <td>{this.props.index}</td>\r\n                <td>{account.get(\"id\")}</td>\r\n                <td><LinkToAccountById account={account.get(\"id\")} /></td>\r\n                {onRemove ? <td><button onClick={onRemove.bind(this, account.get(\"id\"))} className=\"button outline\">Remove</button></td> : null}\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nAccountRow = BindToChainState(AccountRow);\r\n\r\nclass AccountList extends React.Component {\r\n\r\n    _onRemove(listing, account, e) {\r\n        if (account) {\r\n            let currentState = this.props.getCurrentState(account);\r\n            let tr = WalletApi.new_transaction();\r\n            tr.add_type_operation(\"account_whitelist\", {\r\n                \"fee\": {\r\n                    \"amount\": 0,\r\n                    \"asset_id\": \"1.3.0\"\r\n                },\r\n                \"authorizing_account\": this.props.account.get(\"id\"),\r\n                \"account_to_list\": account,\r\n                \"new_listing\": currentState - constants.account_listing[listing]\r\n            });\r\n            WalletDb.process_transaction(tr, null, true);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {removeButton, white, list} = this.props;\r\n\r\n        let rows = list.map((account, index) => {\r\n            return (\r\n                <AccountRow\r\n                    key={account}\r\n                    onRemove={removeButton ? this._onRemove.bind(this, white ? \"white_listed\" : \"black_listed\") : null}\r\n                    account={account}\r\n                    index={index + 1}\r\n                />\r\n            )\r\n        }).toArray();\r\n\r\n        let showHeaders = true;\r\n        if (!rows.length) {\r\n            showHeaders = false;\r\n            rows.push(\r\n                <tr key=\"empty\">\r\n                    <td style={{padding: \"1rem 0\"}} colSpan={removeButton ? 4 : 3}>\r\n                        <Translate content={this.props.emptyText} account={this.props.account.get(\"name\")}/>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <table className=\"table compact dashboard-table\">\r\n                {showHeaders ? (\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th><Translate content=\"account.id\" /></th>\r\n                            <th><Translate content=\"account.name\" /></th>\r\n                            {removeButton ? <th></th> : null}\r\n                        </tr>\r\n                    </thead>) : null}\r\n                <tbody>\r\n                    {rows}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nclass AccountWhitelist extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            accountName: \"\",\r\n            accountToList: null\r\n        };\r\n    }\r\n\r\n    _getCurrentState(id) {\r\n        let {account} = this.props;\r\n        let white = account.get(\"whitelisted_accounts\") || Immutable.List();\r\n        let black = account.get(\"blacklisted_accounts\") || Immutable.List();\r\n        let current = constants.account_listing.no_listing;\r\n\r\n        if (white.includes(id)) {\r\n            current += constants.account_listing.white_listed;\r\n        }\r\n\r\n        if (black.includes(id)) {\r\n            current += constants.account_listing.black_listed;\r\n        }\r\n\r\n        return current;\r\n    }\r\n\r\n    _onAdd(listing, e) {\r\n        let {accountToList} = this.state;\r\n        let {account} = this.props;\r\n\r\n        let currentState = this._getCurrentState(accountToList);\r\n\r\n        if (accountToList) {\r\n            let tr = WalletApi.new_transaction();\r\n            tr.add_type_operation(\"account_whitelist\", {\r\n                \"fee\": {\r\n                    \"amount\": 0,\r\n                    \"asset_id\": \"1.3.0\"\r\n                },\r\n                \"authorizing_account\": account.get(\"id\"),\r\n                \"account_to_list\": accountToList,\r\n                \"new_listing\": currentState + constants.account_listing[listing]\r\n            });\r\n            WalletDb.process_transaction(tr, null, true);\r\n        }\r\n    }\r\n\r\n    _onAccountFound(account) {\r\n        console.log(\"accountFound:\", account);\r\n        this.setState({\r\n            accountName: account ? account.get(\"name\") : null,\r\n            accountToList: account ? account.get(\"id\") : null\r\n        });\r\n    }\r\n\r\n    _onAccountChanged(account) {\r\n        console.log(\"account changed:\", account);\r\n        this.setState({\r\n            accountName: account,\r\n            accountToList: null\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {account} = this.props;\r\n        let {accountName} = this.state;\r\n\r\n        return (\r\n            <div className=\"grid-content app-tables no-padding\" ref=\"appTables\">\r\n                <div className=\"content-block small-12\">\r\n                    <div className=\"tabs-container generic-bordered-box\">\r\n                        <Tabs\r\n                            className=\"account-tabs\"\r\n                            tabsClass=\"account-overview no-padding bordered-header content-block\"\r\n                            setting=\"whitelistTab\"\r\n                            contentClass=\"grid-content shrink small-vertical medium-horizontal no-padding\" \r\n                            segmented={false}\r\n                        >\r\n                            <Tab title=\"account.whitelist.title\">\r\n                                <div style={{paddingBottom: \"1rem\"}} className=\"small-12\">\r\n                                    <div>\r\n                                        <AccountList\r\n                                            emptyText=\"account.whitelist.empty\"\r\n                                            account={account}\r\n                                            getCurrentState={this._getCurrentState.bind(this)}\r\n                                            list={account.get(\"whitelisted_accounts\") || Immutable.List()}\r\n                                            removeButton\r\n                                            white={true}\r\n                                        />\r\n                                    </div>\r\n                                    {!account.get(\"whitelisted_accounts\") ? <p className=\"has-error\">Please note, whitelisting is not working yet due to unresolved backend issue.</p> : null}\r\n                                    <div style={{padding: \"2rem 0\"}}>\r\n                                        <AccountSelector\r\n                                            label={\"account.whitelist.add\"}\r\n                                            accountName={accountName}\r\n                                            onAccountChanged={this._onAccountFound.bind(this)}\r\n                                            onChange={this._onAccountChanged.bind(this)}\r\n                                            account={accountName}\r\n                                            tabIndex={2}\r\n                                            onAction={this._onAdd.bind(this, \"white_listed\")}\r\n                                            action_label=\"account.perm.confirm_add\"\r\n                                            white={false}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Tab>\r\n\r\n                            <Tab title=\"account.whitelist.black\">\r\n                                <div style={{paddingBottom: \"1rem\"}} className=\"small-12\">\r\n                                    <div>\r\n                                        <AccountList\r\n                                            emptyText=\"account.whitelist.empty_black\"\r\n                                            account={account}\r\n                                            getCurrentState={this._getCurrentState.bind(this)}\r\n                                            list={account.get(\"blacklisted_accounts\")}\r\n                                            removeButton\r\n                                        />\r\n                                    </div>\r\n                                    <div style={{padding: \"2rem 1rem\"}}>\r\n                                        <AccountSelector\r\n                                            label={\"account.whitelist.add_black\"}\r\n                                            accountName={accountName}\r\n                                            onAccountChanged={this._onAccountFound.bind(this)}\r\n                                            onChange={this._onAccountChanged.bind(this)}\r\n                                            account={accountName}\r\n                                            tabIndex={2}\r\n                                            onAction={this._onAdd.bind(this, \"black_listed\")}\r\n                                            action_label=\"account.perm.confirm_add\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Tab>\r\n\r\n                            <Tab title=\"account.whitelist.white_by\">\r\n                                <div style={{paddingBottom: \"1rem\"}} className=\"small-12\">\r\n                                    <div>\r\n                                        <AccountList\r\n                                            emptyText=\"account.whitelist.empty_white_by\"\r\n                                            account={account}\r\n                                            list={account.get(\"whitelisting_accounts\")}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Tab>\r\n\r\n                            <Tab title=\"account.whitelist.black_by\">\r\n                                <div style={{paddingBottom: \"1rem\"}} className=\"small-12\">\r\n                                    <div>\r\n                                        <AccountList\r\n                                            emptyText=\"account.whitelist.empty_black_by\"\r\n                                            account={account}\r\n                                            list={account.get(\"blacklisting_accounts\")}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Tab>\r\n\r\n\r\n                        </Tabs>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AccountWhitelist;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/AccountWhitelist.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;;;;AAhCA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAwBA;;;AAoBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AANA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAdA;AAFA;AAmBA;AAAA;AAAA;AACA;AADA;AApBA;AA0BA;;;;AAnIA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AALA;AARA;AAiBA;AADA;AACA;AACA;AAoHA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;;;;AArBA;AACA;AADA;AAGA;AADA;AAFA;AAOA;AADA;AACA;AAgBA;AACA;AACA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AASA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AADA;AAQA;AAAA;AAAA;AACA;AADA;AAVA;AAeA;;;;AA7DA;AACA;AA+DA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AASA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAZA;AADA;AA6BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAVA;AADA;AA0BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AADA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AADA;AA1EA;AADA;AADA;AADA;AA+FA;;;;AArKA;AACA;AAwKA;;;;A","sourceRoot":""}