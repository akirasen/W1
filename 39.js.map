{"version":3,"file":"39.js","sources":["webpack:///app/components/Account/AccountInfo.jsx","webpack:///./app/lib/common/base58.coffee","webpack:///app/components/Transfer/Invoice.jsx"],"sourcesContent":["import React from \"react\";\r\nimport AccountImage from \"./AccountImage\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport Translate from \"react-translate-component\";\r\nimport QRCode from \"qrcode.react\";\r\n\r\nclass AccountInfo extends React.Component {\r\n\r\n    static propTypes = {\r\n        account: ChainTypes.ChainAccount.isRequired,\r\n        title: React.PropTypes.string,\r\n        image_size: React.PropTypes.object.isRequired,\r\n        my_account: React.PropTypes.bool\r\n    }\r\n\r\n    static defaultProps = {\r\n        title: null,\r\n        image_size: {height: 120, width: 120},\r\n        showQR: false,\r\n        titleClass: \"account-title\"\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hover: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let {account, image_size} = this.props;\r\n\r\n        let isLTM = account.get(\"lifetime_referrer_name\") === account.get(\"name\");\r\n\r\n        let QR = <div className=\"account-image\"><QRCode size={image_size.width} value={account.get(\"name\")}/></div>;\r\n\r\n        let qrState = !this.state.hover ? this.props.showQR : !this.props.showQR;\r\n\r\n        return (\r\n            <div style={{maxWidth: image_size.width}} className={\"account-info\" + (this.props.my_account ? \" my-account\" : \"\")}>\r\n                {this.props.title ? <h4>{this.props.title}</h4> : null}\r\n                <div\r\n                    onMouseEnter={() => {this.setState({hover: true});}}\r\n                    onMouseLeave={() => {this.setState({hover: false});}}\r\n                    className=\"clickable\"\r\n                    onClick={() => {\r\n                        this.setState({hover: false});\r\n                        this.props.toggleQR(!this.props.showQR);\r\n                    }}\r\n                >\r\n                    {qrState ?\r\n                        QR :\r\n                        <AccountImage size={image_size} account={account.get(\"name\")} custom_image={null}/>}\r\n                </div>\r\n                <p><Translate content=\"account.deposit_address\" />!</p>\r\n                <p className={this.props.titleClass}><span className={isLTM ? \"lifetime\" : \"\"}>{account.get(\"name\")}</span></p>\r\n                {/* <div className=\"secondary\">\r\n                    <span className=\"subheader\">#{display_id}</span>\r\n                    {this.props.my_account ? <span className=\"my-account-label\"><Translate content=\"account.mine\" /></span> : null}\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BindToChainState(AccountInfo);\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Account/AccountInfo.jsx","module.exports = require 'bs58'\r\n\n\n\n// WEBPACK FOOTER //\n// ./app/lib/common/base58.coffee","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport FormattedAsset from \"../Utility/FormattedAsset\";\r\nimport AccountActions from \"actions/AccountActions\";\r\nimport AccountSelector from \"../Account/AccountSelector\";\r\nimport AccountInfo from \"../Account/AccountInfo\";\r\nimport BalanceComponent from \"../Utility/BalanceComponent\";\r\nimport {ChainStore, FetchChainObjects} from \"seerjs/es\";\r\nimport NotificationActions from \"actions/NotificationActions\";\r\nimport TransactionConfirmStore from \"stores/TransactionConfirmStore\";\r\nimport {decompress} from \"lzma\";\r\nimport bs58 from \"common/base58\";\r\nimport utils from \"common/utils\";\r\n\r\n// invoice example:\r\n//{\r\n//    \"to\" : \"merchant_account_name\",\r\n//    \"to_label\" : \"Merchant Name\",\r\n//    \"currency\": \"TEST\",\r\n//    \"memo\" : \"Invoice #1234\",\r\n//    \"line_items\" : [\r\n//        { \"label\" : \"Something to Buy\", \"quantity\": 1, \"price\" : \"1000.00\" },\r\n//        { \"label\" : \"10 things to Buy\", \"quantity\": 10, \"price\" : \"1000.00\" }\r\n//    ],\r\n//    \"note\" : \"Something the merchant wants to say to the user\",\r\n//    \"callback\" : \"https://merchant.org/complete\"\r\n//}\r\n// http://localhost:8080/#/invoice/8Cv8ZjMa8XCazX37XgNhj4jNc4Z5WgZFM5jueMEs2eEvL3pEmELjAVCWZEJhj9tEG5RuinPCjY1Fi34ozb8Cg3H5YBemy9JoTRt89X1QaE76xnxWPZzLcUjvUd4QZPjCyqZNxvrpCN2mm1xVRY8FNSVsoxsrZwREMyygahYz8S23ErWPRVsfZXTwJNCCbqjWDTReL5yytTKzxyKhg4YrnntYG3jdyrBimDGBRLU7yRS9pQQLcAH4T7j8LXkTocS7w1Zj4amckBmpg5EJCMATTRhtH8RSycfiXWZConzqqzxitWCxZK846YHNh\r\n\r\nclass Invoice extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            invoice: null,\r\n            pay_from_name: null,\r\n            pay_from_account: null,\r\n            error: null\r\n        };\r\n        this.onBroadcastAndConfirm = this.onBroadcastAndConfirm.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let compressed_data = bs58.decode(this.props.params.data);\r\n        try {\r\n            decompress(compressed_data, result => {\r\n                let invoice = JSON.parse(result);\r\n                FetchChainObjects(ChainStore.getAsset, [invoice.currency]).then(assets_array => {\r\n                    this.setState({invoice, asset: assets_array[0]});\r\n                });\r\n            });\r\n        } catch(error) {\r\n            console.dir(error);\r\n            this.setState({error: error.message});\r\n        }\r\n    }\r\n\r\n    parsePrice(price) {\r\n        let m = price.match(/([\\d\\,\\.\\s]+)/);\r\n        if(!m || m.length < 2) 0.0;\r\n        return parseFloat(m[1].replace(/[\\,\\s]/g,\"\"));\r\n    }\r\n\r\n    getTotal(items) {\r\n        if(!items || items.length === 0) return 0.0;\r\n        let total_amount = items.reduce( (total, item) => {\r\n            let price = this.parsePrice(item.price);\r\n            if(!price) return total;\r\n            return total + item.quantity * price;\r\n        }, 0.0);\r\n        return total_amount;\r\n    }\r\n\r\n    onBroadcastAndConfirm(confirm_store_state) {\r\n        if(confirm_store_state.included && confirm_store_state.broadcasted_transaction) {\r\n            TransactionConfirmStore.unlisten(this.onBroadcastAndConfirm);\r\n            TransactionConfirmStore.reset();\r\n            if(this.state.invoice.callback) {\r\n                let trx =  confirm_store_state.broadcasted_transaction;\r\n                let url = `${this.state.invoice.callback}?block=${trx.ref_block_num}&trx=${trx.id()}`;\r\n                window.location.href = url;\r\n            }\r\n        }\r\n    }\r\n\r\n    onPayClick(e) {\r\n        e.preventDefault();\r\n        let asset = this.state.asset;\r\n        let precision = utils.get_asset_precision(asset.get(\"precision\"));\r\n        let amount = this.getTotal(this.state.invoice.line_items);\r\n        let to_account = ChainStore.getAccount(this.state.invoice.to);\r\n        if(!to_account) {\r\n            NotificationActions.error(`Account ${this.state.invoice.to} not found`);\r\n            return;\r\n        }\r\n        AccountActions.transfer(\r\n            this.state.pay_from_account.get(\"id\"),\r\n            to_account.get(\"id\"),\r\n            parseInt(amount * precision, 10),\r\n            asset.get(\"id\"),\r\n            this.state.invoice.memo\r\n        ).then( () => {\r\n                TransactionConfirmStore.listen(this.onBroadcastAndConfirm);\r\n            }).catch( e => {\r\n                console.log( \"error: \",e)\r\n            } );\r\n    }\r\n\r\n    fromChanged(pay_from_name) {\r\n        this.setState({pay_from_name});\r\n    }\r\n\r\n    onFromAccountChanged(pay_from_account) {\r\n        this.setState({pay_from_account});\r\n    }\r\n\r\n    render() {\r\n        console.log(\"-- Invoice.render -->\", this.state.invoice);\r\n        if(this.state.error) return(<div><br/><h4 className=\"has-error text-center\">{this.state.error}</h4></div>);\r\n        if(!this.state.invoice) return null;\r\n        if(!this.state.asset) return (<div><br/><h4 className=\"has-error text-center\">Asset {this.state.invoice.currency} is not supported by this blockchain.</h4></div>);\r\n\r\n        let invoice = this.state.invoice;\r\n        let total_amount = this.getTotal(invoice.line_items);\r\n        let asset = this.state.invoice.currency;\r\n        let balance = null;\r\n        if(this.state.pay_from_account) {\r\n            let balances = this.state.pay_from_account.get(\"balances\");\r\n            console.log(\"-- Invoice.render balances -->\", balances.get(this.state.asset.get(\"id\")));\r\n            balance = balances.get(this.state.asset.get(\"id\"));\r\n        }\r\n        let items = invoice.line_items.map( i => {\r\n            let price = this.parsePrice(i.price);\r\n            let amount = i.quantity * price;\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        <div className=\"item-name\">{i.label}</div>\r\n                        <div className=\"item-description\">{i.quantity} x {<FormattedAsset amount={i.price} asset={asset} exact_amount={true}/>}</div>\r\n                    </td>\r\n                    <td><FormattedAsset amount={amount} asset={asset} exact_amount={true} /></td>\r\n                </tr>\r\n            );\r\n        });\r\n        let payButtonClass = classNames(\"button\", {disabled: !this.state.pay_from_account});\r\n        return (\r\n            <div className=\"grid-block vertical\">\r\n                <div className=\"grid-content\">\r\n                    <div className=\"content-block invoice\">\r\n                        <br/>\r\n                        <h3>Pay Invoice</h3>\r\n                        <h4>{invoice.memo}</h4>\r\n                        <br/>\r\n                        <div>\r\n                            <AccountInfo title={invoice.to_label} account={invoice.to} image_size={{height: 80, width: 80}}/>\r\n                            <br/>\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Items</th>\r\n                                        <th>Amount</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {items}\r\n                                    <tr>\r\n                                        <td className=\"text-right\">Total:</td>\r\n                                        <td><FormattedAsset amount={total_amount} asset={asset} exact_amount={true} /></td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                            <br/>\r\n                            <br/>\r\n\r\n                            <form>\r\n                                <div className=\"grid-block\">\r\n                                    <div className=\"grid-content medium-4\">\r\n                                        {/*<AccountSelect ref=\"pay_from\" account_names={accounts} onChange={this.onAccountChange.bind(this)}/>*/}\r\n                                        <AccountSelector label=\"transfer.pay_from\"\r\n                                                         accountName={this.state.pay_from_name}\r\n                                                         onChange={this.fromChanged.bind(this)}\r\n                                                         onAccountChanged={this.onFromAccountChanged.bind(this)}\r\n                                                         account={this.state.pay_from_name}/>\r\n                                    </div>\r\n                                    {this.state.pay_from_account ?\r\n                                        <div className=\"grid-content medium-1\">\r\n                                            <label>Balance</label>\r\n                                            <BalanceComponent balance={balance}/>\r\n                                        </div> : null\r\n                                    }\r\n                                </div>\r\n                                <br/>\r\n                                <a href className={payButtonClass} onClick={this.onPayClick.bind(this)}>\r\n                                    Pay <FormattedAsset amount={total_amount} asset={asset} exact_amount={true}/> to {invoice.to}\r\n                                </a>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Invoice;\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Transfer/Invoice.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAgBA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AATA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAuBA;;;;AAzDA;AACA;AADA;AAGA;AACA;AACA;AACA;AAJA;AAFA;AAUA;AACA;AACA;AACA;AAJA;AACA;AACA;AAiDA;;;;;;;ACnEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AASA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAPA;AAeA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAVA;AAgBA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAlBA;AArBA;AALA;AADA;AADA;AAuDA;;;;AA5KA;AACA;AA8KA;;;;A","sourceRoot":""}