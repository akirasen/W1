{"version":3,"file":"6.js","sources":["webpack:///app/actions/BrainkeyActions.js","webpack:///app/stores/BrainkeyStore.js","webpack:///app/components/Dashboard/AccountCard.jsx","webpack:///app/components/Wallet/Brainkey.jsx"],"sourcesContent":["import alt from \"alt-instance\";\r\n\r\nclass BrainkeyActions {\r\n\r\n    setBrainkey(brnkey) {\r\n        return brnkey;\r\n    }\r\n\r\n}\r\n\r\nvar BrainkeyActionsWrapped = alt.createActions(BrainkeyActions);\r\nexport default BrainkeyActionsWrapped;\r\n\n\n\n// WEBPACK FOOTER //\n// app/actions/BrainkeyActions.js","import alt from \"alt-instance\";\r\nimport Immutable from \"immutable\";\r\nimport {ChainStore, key} from \"seerjs/es\";\r\nimport BaseStore from \"stores/BaseStore\";\r\nimport BrainkeyActions from \"actions/BrainkeyActions\";\r\n\r\n/** Each instance supports a single brainkey. */\r\nexport default class BrainkeyStoreFactory {\r\n    static instances = new Map()\r\n    /** This may be called multiple times for the same <b>name</b>.  When done,\r\n        (componentWillUnmount) make sure to call this.closeInstance()\r\n    */\r\n    static getInstance(name) {\r\n        var instance = BrainkeyStoreFactory.instances.get(name)\r\n        if( ! instance) {\r\n            instance = alt.createStore(BrainkeyStoreImpl, \"BrainkeyStore\")\r\n            BrainkeyStoreFactory.instances.set(name, instance)\r\n        }\r\n        var subscribed_instance_key = name + \" subscribed_instance\"\r\n        if( ! BrainkeyStoreFactory.instances.get(subscribed_instance_key)) {\r\n            var subscribed_instance = instance.chainStoreUpdate.bind(instance)\r\n            ChainStore.subscribe(subscribed_instance)\r\n            BrainkeyStoreFactory.instances.set(subscribed_instance_key, subscribed_instance)\r\n        }\r\n        return instance\r\n    }\r\n    static closeInstance(name) {\r\n        var instance = BrainkeyStoreFactory.instances.get(name)\r\n        if(!instance) throw new Error(\"unknown instance \" + name)\r\n        var subscribed_instance_key = name + \" subscribed_instance\"\r\n        var subscribed_instance = BrainkeyStoreFactory.instances.get(subscribed_instance_key)\r\n        BrainkeyStoreFactory.instances.delete(subscribed_instance_key)\r\n        ChainStore.unsubscribe(subscribed_instance)\r\n        instance.clearCache()\r\n    }\r\n}\r\n\r\n/** Derived keys may be unassigned from accounts therefore we must define a\r\n    fixed block of derivied keys then monitor the entire block.\r\n*/\r\nvar DERIVIED_BRAINKEY_POOL_SIZE = 10\r\n\r\nclass BrainkeyStoreImpl extends BaseStore {\r\n\r\n    constructor() {\r\n        super()\r\n        this.clearCache()\r\n        this.bindListeners({\r\n            onSetBrainkey: BrainkeyActions.setBrainkey\r\n        })\r\n        this._export(\"inSync\", \"chainStoreUpdate\", \"clearCache\")\r\n    }\r\n\r\n    // chainStoreUnsubscribe() {\r\n    //     try{\r\n    //         ChainStore.unsubscribe(this.chainStoreUpdate)\r\n    //     }catch(e1) {console.log(\"unsub 1 fail\");\r\n    //         try{\r\n    //             ChainStore.unsubscribe(this.chainStoreUpdate.bind(this))\r\n    //         }catch(e2) {console.log(\"unsub 1 fail\")}\r\n    //     }\r\n    // }\r\n\r\n    clearCache() {\r\n        this.state = {\r\n            brnkey: \"\",\r\n            account_ids: Immutable.Set()\r\n        }\r\n        this.derived_keys = new Array()\r\n        // Compared with ChainStore.account_ids_by_key\r\n        this.account_ids_by_key = null\r\n    }\r\n\r\n    /** Saves the brainkey and begins the lookup for derived account referneces */\r\n    onSetBrainkey(brnkey) {\r\n        this.clearCache()\r\n        this.setState({brnkey})\r\n        this.deriveKeys(brnkey)\r\n        this.chainStoreUpdate()\r\n    }\r\n\r\n    /** @return <b>true</b> when all derivied account references are either\r\n        found or known not to exist.\r\n    */\r\n    inSync() {\r\n        this.derived_keys.forEach( derived_key => {\r\n            if( isPendingFromChain(derived_key) )\r\n                return false\r\n        })\r\n        return true\r\n    }\r\n\r\n    chainStoreUpdate() {\r\n        if(! this.derived_keys.length) return\r\n        if(this.account_ids_by_key === ChainStore.account_ids_by_key) return\r\n        this.account_ids_by_key = ChainStore.account_ids_by_key\r\n        this.updateAccountIds()\r\n    }\r\n\r\n    deriveKeys(brnkey = this.state.brnkey) {\r\n        var sequence = this.derived_keys.length // next sequence (starting with 0)\r\n        var private_key = key.get_brainPrivateKey(brnkey, sequence)\r\n        var derived_key = derivedKeyStruct(private_key)\r\n        this.derived_keys.push(derived_key)\r\n        if(this.derived_keys.length < DERIVIED_BRAINKEY_POOL_SIZE)\r\n            this.deriveKeys(brnkey)\r\n    }\r\n\r\n    updateAccountIds() {\r\n        var new_account_ids = Immutable.Set().withMutations( new_ids => {\r\n            var updatePubkey = public_string => {\r\n                var chain_account_ids = ChainStore.getAccountRefsOfKey( public_string )\r\n                if(chain_account_ids) chain_account_ids.forEach( chain_account_id => {\r\n                    new_ids.add(chain_account_id)\r\n                })\r\n            }\r\n            this.derived_keys.forEach( derived_key =>\r\n                updatePubkey(derived_key.public_string) )\r\n        })\r\n        if( ! new_account_ids.equals(this.state.account_ids)) {\r\n            this.state.account_ids = new_account_ids\r\n            this.setState({account_ids: new_account_ids})\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction derivedKeyStruct(private_key) {\r\n    var public_string = private_key.toPublicKey().toPublicKeyString()\r\n    var derived_key = {private_key, public_string}\r\n    return derived_key\r\n}\r\n\r\nvar isPendingFromChain = derived_key =>\r\n    ChainStore.getAccountRefsOfKey( derived_key.public_string ) === undefined\r\n\n\n\n// WEBPACK FOOTER //\n// app/stores/BrainkeyStore.js","import React from \"react\";\r\nimport BalanceComponent from \"../Utility/BalanceComponent\";\r\nimport AccountImage from \"../Account/AccountImage\";\r\nimport ChainTypes from \"../Utility/ChainTypes\";\r\nimport BindToChainState from \"../Utility/BindToChainState\";\r\nimport AccountStore from \"stores/AccountStore\";\r\nimport {ChainStore} from \"seerjs/es\";\r\n\r\n/**\r\n *  @brief displays the summary of a given account in a condenced view (for the dashboard)\r\n *\r\n *  This card has the following properties:\r\n *\r\n *  { account: ${name_or_id} }\r\n */\r\n\r\nclass AccountCard extends React.Component {\r\n\r\n    static contextTypes = {\r\n        router: React.PropTypes.object.isRequired\r\n    }\r\n\r\n    static propTypes = {\r\n        account: ChainTypes.ChainAccount.isRequired\r\n    };\r\n\r\n    onCardClick(e) {\r\n        e.preventDefault();\r\n        let name = this.props.account.get('name');\r\n        this.context.router.push(`/account/${name}/overview/`);\r\n    }\r\n\r\n    render() {\r\n        let name = null;\r\n        let balances = null;\r\n        let isMyAccount = false;\r\n        if( this.props.account )\r\n        {\r\n           name = this.props.account.get('name');\r\n           let abal = this.props.account.get('balances' )\r\n           if( abal ) {\r\n              balances = abal.map( x => {\r\n                let balanceAmount = ChainStore.getObject(x);\r\n                if (!balanceAmount.get(\"balance\")) {\r\n                    return null;\r\n                }\r\n                return <li key={x}><BalanceComponent balance={x}/></li>;\r\n            }).toArray();\r\n           }\r\n           isMyAccount = AccountStore.isMyAccount(this.props.account);\r\n        }\r\n\r\n        return (\r\n            <div className=\"grid-content account-card\" onClick={this.onCardClick.bind(this)}>\r\n                <div className={\"card\" + (isMyAccount ? \" my-account\" : \"\")}>\r\n                    <h4 className=\"text-center\">{name}</h4>\r\n                    <div className=\"card-content clearfix\">\r\n                        <div className=\"float-left\">\r\n                            <AccountImage account={name} size={{height: 64, width: 64}}/>\r\n                        </div>\r\n                        <ul className=\"balances\">\r\n                            {balances}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BindToChainState(AccountCard);\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Dashboard/AccountCard.jsx","import React, {Component} from \"react\";\r\nimport { connect } from \"alt-react\";\r\nimport Immutable from \"immutable\";\r\nimport cname from \"classnames\";\r\nimport BrainkeyActions from \"actions/BrainkeyActions\";\r\nimport BrainkeyStoreFactory from \"stores/BrainkeyStore\";\r\nimport BindToChainState from \"components/Utility/BindToChainState\";\r\nimport ChainTypes from \"components/Utility/ChainTypes\";\r\nimport BrainkeyInput from \"components/Wallet/BrainkeyInput\";\r\nimport {pairs} from \"lodash\";\r\nimport Translate from \"react-translate-component\";\r\nimport AccountCard from \"components/Dashboard/AccountCard\";\r\n\r\nconst connectObject = {\r\n    listenTo() {\r\n        return [BrainkeyStoreFactory.getInstance(\"wmc\")];\r\n    },\r\n    getProps() {\r\n        return BrainkeyStoreFactory.getInstance(\"wmc\").getState();\r\n    }\r\n};\r\n\r\nclass Brainkey extends Component {\r\n    componentWillUnmount() {\r\n        BrainkeyStoreFactory.closeInstance(\"wmc\");\r\n    }\r\n    render() {\r\n        return (\r\n            <span>\r\n                <h3><Translate content=\"wallet.brainkey\" /></h3>\r\n                <BrainkeyInputAccept>\r\n                    <ViewBrainkey/>\r\n                </BrainkeyInputAccept>\r\n            </span>\r\n        );\r\n    }\r\n}\r\nBrainkey = connect(Brainkey, connectObject);\r\nexport default Brainkey;\r\n\r\nclass ViewBrainkey extends Component {\r\n    render() {\r\n        let short_brnkey = this.props.brnkey.substring(0, 10);\r\n        // console.log(\"this.props.account_ids.toArray()\", this.props.account_ids.toArray())\r\n        return <span>\r\n            <div><span className=\"\">{short_brnkey}</span>&hellip;</div>\r\n            <p></p>\r\n            {this.props.account_ids.size?\r\n            <BrainkeyAccounts accounts={Immutable.List(this.props.account_ids.toArray())}/>:\r\n            <h5><Translate content=\"wallet.no_accounts\" /></h5>}\r\n        </span>;\r\n    }\r\n}\r\nViewBrainkey = connect(ViewBrainkey, connectObject);\r\n\r\nclass BrainkeyAccounts {\r\n\r\n    static propTypes = {\r\n        accounts: ChainTypes.ChainAccountsList.isRequired\r\n    }\r\n\r\n    render() {\r\n        let rows = pairs(this.props.accounts).filter( account => !!account[1] )\r\n            .map( account => account[1].get(\"name\") ).sort()\r\n            .map( name => <AccountCard key={name} account={name}/> );\r\n        return <span>\r\n            {rows}\r\n        </span>;\r\n    }\r\n}\r\nBrainkeyAccounts = BindToChainState(BrainkeyAccounts, {keep_updating: true});\r\n\r\nexport class BrainkeyInputAccept extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = { brnkey: \"\", accept: false };\r\n    }\r\n\r\n    render() {\r\n        if(this.state.accept) return <span>{this.props.children}</span>;\r\n\r\n        let ready = this.state.brnkey && this.state.brnkey !== \"\";\r\n        return (\r\n            <span className=\"grid-container\">\r\n                <div>\r\n                    <BrainkeyInput onChange={this.onBrainkeyChange.bind(this)}/>\r\n                </div>\r\n                <div className={cname(\"button success\", {disabled: ! ready})}\r\n                    onClick={this.onAccept.bind(this)}><Translate content=\"wallet.accept\" /></div>\r\n            </span>\r\n        );\r\n    }\r\n\r\n    onBrainkeyChange(brnkey) {\r\n        this.setState({ brnkey });\r\n    }\r\n\r\n    onAccept() {\r\n        this.setState({accept: true});\r\n        BrainkeyActions.setBrainkey(this.state.brnkey);\r\n    }\r\n\r\n}\r\n\r\n// <div onClick={this.onLookupAccounts.bind(this)} className=\"button success\">Lookup Accounts</div>\r\n// onLookupAccounts() {\r\n//\r\n// }\r\n\n\n\n// WEBPACK FOOTER //\n// app/components/Wallet/Brainkey.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;AAEA;AACA;AACA;;;;;;AAIA;AACA;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;AA9BA;AAAA;AAiCA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AADA;AAGA;AANA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAjFA;AACA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAFA;AADA;AAcA;;;;AAnDA;AACA;AADA;AAGA;AADA;AAFA;AAOA;AADA;AACA;AACA;AA8CA;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;;;;;;;;;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAFA;AAOA;;;;AAbA;AACA;AAcA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AALA;AAOA;;;;AAXA;AACA;AAYA;AACA;AACA;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;;;;;;AAbA;AAGA;AADA;AACA;AAYA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;AANA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AADA;AAJA;AAQA;AApBA;AAAA;AAAA;AAuBA;AACA;AAxBA;AAAA;AAAA;AA2BA;AACA;AACA;AA7BA;AACA;AADA;AAAA;AACA;AAgCA;AACA;AACA;AACA;;;;A","sourceRoot":""}